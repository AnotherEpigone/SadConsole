<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SadConsole</name>
    </assembly>
    <members>
        <member name="T:SadConsole.Algorithms">
            <summary>
            The Bresenham algorithm collection
            </summary>
        </member>
        <member name="M:SadConsole.Algorithms.Swap``1(``0@,``0@)">
            <summary>
            Swaps two references.
            </summary>
            <typeparam name="T">The type being swapped.</typeparam>
            <param name="lhs">Left value.</param>
            <param name="rhs">Right value.</param>
        </member>
        <member name="M:SadConsole.Algorithms.Line(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Plot the line from (x0, y0) to (x1, y1) using steep.
            </summary>
            <param name="x0">The start x</param>
            <param name="y0">The start y</param>
            <param name="x1">The end x</param>
            <param name="y1">The end y</param>
            <param name="plot">The plotting function, taking x and y. (if this returns false, the algorithm stops early)</param>
        </member>
        <member name="M:SadConsole.Algorithms.Line2(System.Int32,System.Int32,System.Int32,System.Int32,System.Func{System.Int32,System.Int32,System.Boolean})">
            <summary>
            Plot the line from (x0, y0) to (x1, y1) using an interpolation derived algorithm.
            </summary>
            <param name="x0">The start x</param>
            <param name="y0">The start y</param>
            <param name="x1">The end x</param>
            <param name="y1">The end y</param>
            <param name="plot">The plotting function (if this returns false, the algorithm stops early)</param>
        </member>
        <member name="M:SadConsole.Algorithms.FloodFill``1(``0,System.Func{``0,System.Boolean},System.Action{``0},System.Func{``0,SadConsole.Algorithms.NodeConnections{``0}})">
            <summary>
            Uses a 4-way fill algorithm to change items from one type to another.
            </summary>
            <typeparam name="TNode">The item type that is changed.</typeparam>
            <param name="node">The item to change.</param>
            <param name="shouldNodeChange">Determines if the node should change.</param>
            <param name="changeNode">After it is determined if the node should change, this changes the node.</param>
            <param name="getNodeConnections">Gets any other nodes connected to this node.</param>
        </member>
        <member name="M:SadConsole.Algorithms.GradientFill(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.Int32,System.Int32,SadRogue.Primitives.Rectangle,SadRogue.Primitives.ColorGradient,System.Action{System.Int32,System.Int32,SadRogue.Primitives.Color})">
            <summary>
            Processes an area and applies a gradient calculation to each part of the area.
            </summary>
            <param name="cellSize">The size of an individual cell. Makes the angle uniform.</param>
            <param name="position">The center of the gradient.</param>
            <param name="strength">The width of the gradient spread.</param>
            <param name="angle">The angle to apply the gradient.</param>
            <param name="area">The area to calculate.</param>
            <param name="gradient">The color gradient to fill with.</param>
            <param name="applyAction">The callback called for each part of the area.</param>
        </member>
        <member name="M:SadConsole.Algorithms.Circle(System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Plots the outside of the circle, passing the x,y to <paramref name="plot"/>.
            </summary>
            <param name="centerX">The X coordinate of the center of the circle.</param>
            <param name="centerY">The Y coordinate of the center of the circle.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="plot">A method to call on each x,y coordinate of the outside of the circle.</param>
        </member>
        <member name="M:SadConsole.Algorithms.Ellipse(System.Int32,System.Int32,System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Plots the outside of an ellipse, passing the x,y to <paramref name="plot"/>.
            </summary>
            <param name="x0">The X coordinate of the first corner of the ellipse.</param>
            <param name="y0">The Y coordinate of the first corner of the ellipse.</param>
            <param name="x1">The X coordinate of the second corner of the ellipse.</param>
            <param name="y1">The Y coordinate of the second corner of the ellipse.</param>
            <param name="plot">A method to call on each x,y coordinate of the outside of the ellipse.</param>
        </member>
        <member name="T:SadConsole.Algorithms.NodeConnections`1">
            <summary>
            Describes the 4-way connections of a node.
            </summary>
            <typeparam name="TNode">The type of object the node and its connections are.</typeparam>
        </member>
        <member name="M:SadConsole.Algorithms.NodeConnections`1.#ctor(`0,`0,`0,`0)">
            <summary>
            Creates a new instance of this object with the specified connections.
            </summary>
            <param name="west">The west connection.</param>
            <param name="east">The east connection.</param>
            <param name="north">The north connection.</param>
            <param name="south">The south connection.</param>
        </member>
        <member name="M:SadConsole.Algorithms.NodeConnections`1.#ctor">
            <summary>
            Creates a new instance of this object with all connections set to <see langword="null"/>.
            </summary>
        </member>
        <member name="T:SadConsole.AnimatedObject">
            <summary>
            Animates a list of frames.
            </summary>
        </member>
        <member name="E:SadConsole.AnimatedObject.AnimationStateChanged">
            <summary>
            Raised when the <see cref="T:SadConsole.AnimatedObject.AnimationState"/> changes.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedObject.FramesList">
            <summary>
            The frames of animation.
            </summary>
            <remarks>If this collection changes, <see cref="F:SadConsole.AnimatedObject.CurrentFrameIndexValue"/>, <see cref="M:SadConsole.AnimatedObject.UpdateFrameReferences"/>, and <see cref="F:SadConsole.AnimatedObject.TimePerFrame"/> should all be recalculated.</remarks>
        </member>
        <member name="F:SadConsole.AnimatedObject.AddedTime">
            <summary>
            Time counter for the animation
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedObject.CurrentFrameIndexValue">
            <summary>
            The current frame index being animated.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedObject.TimePerFrame">
            <summary>
            How much time per animated frame should be used.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedObject.Frames">
            <summary>
            All frames of the animation
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedObject.Center">
            <summary>
            Center of the animation used in positioning.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedObject.Repeat">
            <summary>
            Indicates whether or not this animation will repeat once it has finished animating.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedObject.IsPlaying">
            <summary>
            When true, Indicates the animation is currently animating. The <see cref="M:SadConsole.AnimatedObject.Update"/> method will advance the frames.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedObject.AnimationDuration">
            <summary>
            The length of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedObject.CurrentFrameIndex">
            <summary>
            Gets or sets the current frame index to animate.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedObject.IsEmpty">
            <summary>
            Indicates the animation is empty.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedObject.Width">
            <summary>
            The width of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedObject.Height">
            <summary>
            The height of the animation.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedObject.Name">
            <summary>
            Gets the name of this animation.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedObject.CurrentFrame">
            <summary>
            Gets the currently frame being animated.
            </summary>
        </member>
        <member name="P:SadConsole.AnimatedObject.State">
            <summary>
            Gets the current animation state.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedObject.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Creates a new animation with the specified name, width, and height.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="width">The width of each frame this animation will have.</param>
            <param name="height">The height of each frame this animation will have.</param>
        </member>
        <member name="M:SadConsole.AnimatedObject.#ctor(System.String,System.Int32,System.Int32,SadConsole.Font,SadRogue.Primitives.Point)">
            <summary>
            Creates a new animation with the specified name, width, and height.
            </summary>
            <param name="name">The name of the animation.</param>
            <param name="width">The width of each frame this animation will have.</param>
            <param name="height">The height of each frame this animation will have.</param>
            <param name="font">The font used with this animation.</param>
            <param name="fontSize">The size of the font.</param>
        </member>
        <member name="M:SadConsole.AnimatedObject.UpdateFrameReferences">
            <summary>
            Updates the base <see cref="P:SadConsole.CellSurface.Cells"/> references to the current frame.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedObject.CreateFrame">
            <summary>
            Creates a new frame with the same dimensions as this entity and adds it to the Frames collection of the entity.
            </summary>
            <returns>The created frame.</returns>
        </member>
        <member name="M:SadConsole.AnimatedObject.CalculateFrameDuration">
            <summary>
            Calculates the time needed per frame for rendering.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedObject.Stop">
            <summary>
            Stops animating.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedObject.Start">
            <summary>
            Starts animating the frames.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedObject.Restart">
            <summary>
            Restarts the animation from the first frame.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedObject.Update">
            <summary>
            Updates the animation frames and calls update on the base class.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedObject.ToString">
            <summary>
            Returns the name of the animation.
            </summary>
            <returns>The name.</returns>
        </member>
        <member name="M:SadConsole.AnimatedObject.UpdateAbsolutePosition">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.AnimatedObject.CreateStatic(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Creates an animated surface that looks like static.
            </summary>
            <param name="width">The width of the surface.</param>
            <param name="height">The height of the surface.</param>
            <param name="frames">How many frames the animation should have.</param>
            <param name="blankChance">Chance a character will be blank. Characters are between index 48-158. Chance is evaluated versus <see cref="M:System.Random.NextDouble"/>.</param>
            <returns>An animation.</returns>
        </member>
        <member name="M:SadConsole.AnimatedObject.Save(System.String)">
            <summary>
            Saves the <see cref="T:SadConsole.AnimatedObject"/> to a file.
            </summary>
            <param name="file">The destination file.</param>
        </member>
        <member name="M:SadConsole.AnimatedObject.Load(System.String)">
            <summary>
            Loads a <see cref="T:SadConsole.AnimatedObject"/> from a file.
            </summary>
            <param name="file">The source file.</param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.AnimatedObject.AnimationStateChangedEventArgs">
            <summary>
            Event args for when the animation state changes
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedObject.AnimationStateChangedEventArgs.PreviousState">
            <summary>
            The previous state.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedObject.AnimationStateChangedEventArgs.NewState">
            <summary>
            The new state.
            </summary>
        </member>
        <member name="M:SadConsole.AnimatedObject.AnimationStateChangedEventArgs.#ctor(SadConsole.AnimatedObject.AnimationState,SadConsole.AnimatedObject.AnimationState)">
            <summary>
            Creates a new instance of the event args.
            </summary>
            <param name="previousState">The previous state.</param>
            <param name="newState">The new state.</param>
        </member>
        <member name="T:SadConsole.AnimatedObject.AnimationState">
            <summary>
            Represents what state the animation is in.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedObject.AnimationState.Stopped">
            <summary>
            The animation has never been played or was forcibly stopped.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedObject.AnimationState.Playing">
            <summary>
            The animation is currently playing.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedObject.AnimationState.Restarted">
            <summary>
            The animation was either manually restarted or repeated.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedObject.AnimationState.Finished">
            <summary>
            The animation was played and completed.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedObject.AnimationState.Activated">
            <summary>
            The animation is now the current animation for an entity.
            </summary>
        </member>
        <member name="F:SadConsole.AnimatedObject.AnimationState.Deactivated">
            <summary>
            The animation is no longer the current animation for an entity.
            </summary>
        </member>
        <member name="T:SadConsole.CellDecorator">
            <summary>
            Decorates a cell with a colored glyph.
            </summary>
        </member>
        <member name="P:SadConsole.CellDecorator.Empty">
            <summary>
            An empty cell decorator.
            </summary>
        </member>
        <member name="F:SadConsole.CellDecorator.Color">
            <summary>
            Foreground color of the decorator.
            </summary>
        </member>
        <member name="F:SadConsole.CellDecorator.Glyph">
            <summary>
            Glyph of the decorator.
            </summary>
        </member>
        <member name="F:SadConsole.CellDecorator.Mirror">
            <summary>
            Mirror setting of the decorator.
            </summary>
        </member>
        <member name="M:SadConsole.CellDecorator.#ctor(SadRogue.Primitives.Color,System.Int32,SadConsole.Mirror)">
            <summary>
            Creates a new decorator with the specified colors, glyph, visiblity, and mirror settings.
            </summary>
            <param name="color">Foreground color.</param>
            <param name="glyph">Glyph value.</param>
            <param name="mirror">Mirror setting.</param>
        </member>
        <member name="M:SadConsole.CellDecorator.Equals(SadConsole.CellDecorator)">
            <summary>
            Determines if this object has the same value as the other.
            </summary>
            <param name="other">The object to test against.</param>
            <returns>True if the objects have the same values.</returns>
        </member>
        <member name="M:SadConsole.CellDecorator.op_Equality(SadConsole.CellDecorator,SadConsole.CellDecorator)">
            <summary>
            Checks that the left and right objects match.
            </summary>
            <param name="left">The first object to test.</param>
            <param name="right">The second object to test.</param>
            <returns>True when the <see cref="F:SadConsole.CellDecorator.Color"/>, <see cref="F:SadConsole.CellDecorator.Glyph"/>, and <see cref="F:SadConsole.CellDecorator.Mirror"/> match.</returns>
        </member>
        <member name="M:SadConsole.CellDecorator.op_Inequality(SadConsole.CellDecorator,SadConsole.CellDecorator)">
            <summary>
            Checks that the left and right objects do not match.
            </summary>
            <param name="left">The first object to test.</param>
            <param name="right">The second object to test.</param>
            <returns>True when the <see cref="F:SadConsole.CellDecorator.Color"/>, <see cref="F:SadConsole.CellDecorator.Glyph"/>, and <see cref="F:SadConsole.CellDecorator.Mirror"/> do not match.</returns>
        </member>
        <member name="M:SadConsole.CellDecorator.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.CellDecorator.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.CellSurface">
            <summary>
            An array of <see cref="T:SadConsole.ColoredGlyph"/> objects used to represent a 2D surface.
            </summary>
        </member>
        <member name="E:SadConsole.CellSurface.DirtyChanged">
            <summary>
            An event that is raised when <see cref="P:SadConsole.CellSurface.IsDirty"/> is set to true.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.IsDirty">
            <summary>
            Indicates the surface has changed and needs to be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.DefaultForeground">
            <summary>
            The default foreground for glyphs on this surface.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.DefaultBackground">
            <summary>
            The default background for glyphs on this surface.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.ViewWidth">
            <summary>
            How many cells wide are visible.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.ViewHeight">
            <summary>
            How many cells high are visible.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.BufferWidth">
            <summary>
            Width of the surface buffer.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.BufferHeight">
            <summary>
            Height of the surface buffer.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.IsScrollable">
            <summary>
            Returns <see langword="true"/> when the <see cref="P:SadConsole.CellSurface.ViewHeight"/> or <see cref="P:SadConsole.CellSurface.ViewWidth"/> is different from <see cref="P:SadConsole.CellSurface.BufferHeight"/> or <see cref="P:SadConsole.CellSurface.BufferWidth"/>, respectively.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.ViewPosition">
            <summary>
            The position of the buffer.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.Cells">
            <summary>
            All cells of the surface.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.Item(System.Int32,System.Int32)">
            <summary>
            Gets a cell based on its coordinates on the surface.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="P:SadConsole.CellSurface.Item(System.Int32)">
            <summary>
            Gets a cell by index.
            </summary>
            <param name="index">The index of the cell.</param>
            <returns>The indicated cell.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="P:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="P:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the surface in cells.</param>
            <param name="height">The height of the surface in cells.</param>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(System.Int32,System.Int32,SadConsole.ColoredGlyph[])">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="P:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="P:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the surface in cells.</param>
            <param name="height">The height of the surface in cells.</param>
            <param name="initialCells">The cells to seed the surface with. If <see langword="null"/>, creates the cell array for you.</param>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="P:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="P:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The visible width of the surface in cells.</param>
            <param name="height">The visible height of the surface in cells.</param>
            <param name="bufferWidth">The total width of the surface in cells.</param>
            <param name="bufferHeight">The total height of the surface in cells.</param>
        </member>
        <member name="M:SadConsole.CellSurface.#ctor(System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.ColoredGlyph[])">
            <summary>
            Creates a new surface with the specified width and height, with <see cref="P:SadRogue.Primitives.Color.Transparent"/> for the background and <see cref="P:SadRogue.Primitives.Color.White"/> for the foreground.
            </summary>
            <param name="width">The width of the surface in cells.</param>
            <param name="height">The height of the surface in cells.</param>
            <param name="bufferWidth">The total width of the surface in cells.</param>
            <param name="bufferHeight">The total height of the surface in cells.</param>
            <param name="initialCells">The cells to seed the surface with. If <see langword="null"/>, creates the cell array for you.</param>
        </member>
        <member name="M:SadConsole.CellSurface.OnDirtyChanged">
            <summary>
            Called when the <see cref="P:SadConsole.CellSurface.IsDirty"/> property changes.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.OnCellsReset">
            <summary>
            Called when the <see cref="P:SadConsole.CellSurface.Cells"/> property is reset.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.GetViewRectangle">
            <summary>
            Gets a rectangle representing the visible portion of the surface.
            </summary>
            <returns>A rectangle with only the visible area.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetEnumerator">
            <summary>
            Gets an enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.
            </summary>
            <returns>An enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.
            </summary>
            <returns>An enumerator for <see cref="P:SadConsole.CellSurface.Cells"/>.</returns>
        </member>
        <member name="F:SadConsole.CellSurface.TimesShiftedDown">
            <summary>
            A variable that tracks how many times this editor shifted the surface down.
            </summary>
        </member>
        <member name="F:SadConsole.CellSurface.TimesShiftedRight">
            <summary>
            A variable that tracks how many times this editor shifted the surface right.
            </summary>
        </member>
        <member name="F:SadConsole.CellSurface.TimesShiftedLeft">
            <summary>
            A variable that tracks how many times this editor shifted the surface left.
            </summary>
        </member>
        <member name="F:SadConsole.CellSurface.TimesShiftedUp">
            <summary>
            A variable that tracks how many times this editor shifted the surface up.
            </summary>
        </member>
        <member name="F:SadConsole.CellSurface.UsePrintProcessor">
            <summary>
            When true, the <see cref="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.CellSurface,SadConsole.StringParser.ParseCommandStacks)"/> command is used to print strings.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.Effects">
            <summary>
            Processes the effects added to cells with <see cref="o:SetEffect"/>.
            </summary>
        </member>
        <member name="P:SadConsole.CellSurface.EraseGlyph">
            <summary>
            The glyph used by the <see cref="M:SadConsole.CellSurface.Erase(System.Int32,System.Int32,System.Int32)"/> method. Defaults to 0.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.SetPixels(SadRogue.Primitives.Color[])">
            <summary>
            Sets each background of a cell to the array of colors. Must be the same length as this cell surface.
            </summary>
            <param name="pixels">The colors to place.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetPixels(SadRogue.Primitives.Rectangle,SadRogue.Primitives.Color[])">
            <summary>
            Sets each background of a cell to the array of colors.
            </summary>
            <param name="area">An area to fill with pixels.</param>
            <param name="pixels"></param>
        </member>
        <member name="M:SadConsole.CellSurface.IsValidCell(System.Int32,System.Int32)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.IsValidCell(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Tests if a cell is valid based on its x,y position.
            </summary>
            <param name="x">The x coordinate of the cell to test.</param>
            <param name="y">The y coordinate of the cell to test.</param>
            <param name="index">If the cell is valid, the index of the cell when found.</param>
            <returns>A true value indicating the cell by x,y does exist in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.IsValidCell(System.Int32)">
            <summary>
            Tests if a cell is valid based on its index.
            </summary>
            <param name="index">The index to test.</param>
            <returns>A true value indicating the cell index is in this cell surface.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.SetGlyph(System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes the glyph of a specified cell to a new value.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetGlyph(System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Color)">
            <summary>
            Changes the glyph and foreground of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetGlyph(System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Changes the glyph, foreground, and background of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetGlyph(System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadConsole.Mirror)">
            <summary>
            Changes the glyph, foreground, background, and mirror of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
            <param name="mirror">Sets how the glyph will be mirrored.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetGlyph(System.Int32,System.Int32,System.Int32,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadConsole.Mirror,System.Collections.Generic.IEnumerable{SadConsole.CellDecorator})">
            <summary>
            Changes the glyph, foreground, background, and mirror of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="glyph">The desired glyph.</param>
            <param name="foreground">The desired foreground.</param>
            <param name="background">The desired background.</param>
            <param name="mirror">Sets how the glyph will be mirrored.</param>
            <param name="decorators">Decorators to set on the cell. Will clear existing decorators first.</param>
        </member>
        <member name="M:SadConsole.CellSurface.GetGlyph(System.Int32,System.Int32)">
            <summary>
            Gets the glyph of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The glyph index.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.SetForeground(System.Int32,System.Int32,SadRogue.Primitives.Color)">
            <summary>
            Changes the foreground of a specified cell to a new color.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="color">The desired color of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurface.GetForeground(System.Int32,System.Int32)">
            <summary>
            Gets the foreground of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.SetBackground(System.Int32,System.Int32,SadRogue.Primitives.Color)">
            <summary>
            Changes the background of a cell to the specified color.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="color">The desired color of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurface.GetBackground(System.Int32,System.Int32)">
            <summary>
            Gets the background of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.SetEffect(System.Int32,System.Int32,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetEffect(System.Int32,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="index">Index of the cell.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetEffect(System.Collections.Generic.IEnumerable{SadConsole.ColoredGlyph},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a list of cells to the specified effect.
            </summary>
            <param name="cells">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetEffect(SadConsole.ColoredGlyph,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a cell to the specified effect.
            </summary>
            <param name="cell">The cells for the effect.</param>
            <param name="effect">The desired effect.</param>
        </member>
        <member name="M:SadConsole.CellSurface.GetEffect(System.Int32,System.Int32)">
            <summary>
            Gets the effect of the specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The effect.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.SetCellAppearance(System.Int32,System.Int32,SadConsole.ColoredGlyph)">
            <summary>
            Changes the appearance of the cell. The appearance represents the look of a cell and will first be cloned, then applied to the cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="appearance">The desired appearance of the cell. A null value cannot be passed.</param>
        </member>
        <member name="M:SadConsole.CellSurface.GetCellAppearance(System.Int32,System.Int32)">
            <summary>
            Gets the appearance of a cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The appearance.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetCells(SadRogue.Primitives.Rectangle)">
            <summary>
            Gets an enumerable of cells over a specific area.
            </summary>
            <param name="area">The area to get cells from.</param>
            <returns>A new array with references to each cell in the area.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetMirror(System.Int32,System.Int32)">
            <summary>
            Gets the mirror of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The color.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.SetMirror(System.Int32,System.Int32,SadConsole.Mirror)">
            <summary>
            Sets the mirror of a specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <param name="mirror">The mirror of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetDecorator(System.Int32,System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Sets the decorator of one or more cells.
            </summary>
            <param name="x">The x coordinate of the cell.</param>
            <param name="y">The y coordinate of the cell.</param>
            <param name="count">The count of cells to use from the x,y coordinate (inclusive).</param>
            <param name="decorators">The decorators. Use <code>null</code> to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetDecorator(System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Sets the decorator of one or more cells.
            </summary>
            <param name="index">The index of the cell to start applying.</param>
            <param name="count">The count of cells to use from the index (inclusive).</param>
            <param name="decorators">The decorators. Use <code>null</code> to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurface.AddDecorator(System.Int32,System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Appends the decorators to one or more cells
            </summary>
            <param name="x">The x coordinate of the cell.</param>
            <param name="y">The y coordinate of the cell.</param>
            <param name="count">The count of cells to use from the x,y coordinate (inclusive).</param>
            <param name="decorators">The decorators. Use <code>null</code> to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurface.AddDecorator(System.Int32,System.Int32,SadConsole.CellDecorator[])">
            <summary>
            Appends the decorators to one or more cells
            </summary>
            <param name="index">The index of the cell to start applying.</param>
            <param name="count">The count of cells to use from the index (inclusive).</param>
            <param name="decorators">The decorators. If <code>null</code>, does nothing.</param>
        </member>
        <member name="M:SadConsole.CellSurface.ClearDecorators(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clears the decorators of the specified cells.
            </summary>
            <param name="x">The x coordinate of the cell.</param>
            <param name="y">The y coordinate of the cell.</param>
            <param name="count">The count of cells to use from the x,y coordinate (inclusive).</param>
        </member>
        <member name="M:SadConsole.CellSurface.ClearDecorators(System.Int32,System.Int32)">
            <summary>
            Clears the decorators of the specified cells.
            </summary>
            <param name="index">The index of the cell to start applying.</param>
            <param name="count">The count of cells to use from the index (inclusive).</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,System.String)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,System.String,SadRogue.Primitives.Color)">
            <summary>
            Draws the string on the console at the specified location and color, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Draws the string on the console at the specified location with the specified foreground and background color, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
            <param name="background">Sets the background of all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadConsole.Mirror)">
            <summary>
            Draws the string on the console at the specified location with the specified settings. 
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="foreground">Sets the foreground of all characters in the text.</param>
            <param name="background">Sets the background of all characters in the text.</param>
            <param name="mirror">The mirror to set on all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,System.String,SadConsole.Mirror)">
            <summary>
            Draws the string on the console at the specified location with the specified settings. 
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="mirror">The mirror to set on all characters in the text.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,System.String,SadConsole.ColoredGlyph,SadConsole.Effects.ICellEffect)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
            <param name="appearance">The appearance of the cell</param>
            <param name="effect">An optional effect to apply to the printed cells.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,SadConsole.ColoredGlyph)">
            <summary>
            Draws a single glyph on the console at the specified location.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="glyph">The glyph to display.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Print(System.Int32,System.Int32,SadConsole.ColoredString)">
            <summary>
            Draws the string on the console at the specified location, wrapping if needed.
            </summary>
            <param name="x">X location of the text.</param>
            <param name="y">Y location of the text.</param>
            <param name="text">The string to display.</param>
        </member>
        <member name="M:SadConsole.CellSurface.GetString(System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface from the specified coordinates.
            </summary>
            <param name="x">The x position of the surface to start at.</param>
            <param name="y">The y position of the surface to start at.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetString(System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface.
            </summary>
            <param name="index">Where to start getting characters from.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetStringColored(System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface from the specified coordinates.
            </summary>
            <param name="x">The x position of the surface to start at.</param>
            <param name="y">The y position of the surface to start at.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetStringColored(System.Int32,System.Int32)">
            <summary>
            Builds a string from the text surface.
            </summary>
            <param name="index">Where to start getting characters from.</param>
            <param name="length">How many characters to fill the string with.</param>
            <returns>A string built from the text surface data.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.ClearShiftValues">
            <summary>
            Resets the shifted amounts to 0, as if the surface has never shifted.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftUp">
            <summary>
            Scrolls all the console data up by one.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftUp(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data up by the specified amount of rows.
            </summary>
            <param name="amount">How many rows to shift.</param>
            <param name="wrap">When false, a blank line appears at the bottom. When true, the top line appears at the bottom.</param>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftDown">
            <summary>
            Scrolls all the console data down by one.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftDown(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data down by the specified amount of rows.
            </summary>
            <param name="amount">How many rows to shift.</param>
            <param name="wrap">When false, a blank line appears at the top. When true, the bottom line appears at the top.</param>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftRight">
            <summary>
            Scrolls all the console data right by one.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftRight(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data right by the specified amount.
            </summary>
            <param name="amount">How much to scroll.</param>
            <param name="wrap">When false, a blank line appears at the left. When true, the right line appears at the left.</param>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftLeft">
            <summary>
            Scrolls all the console data left by one.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.ShiftLeft(System.Int32,System.Boolean)">
            <summary>
            Scrolls all the console data left by the specified amount.
            </summary>
            <param name="amount">How much to scroll.</param>
            <param name="wrap">When false, a blank line appears at the right. When true, the left line appears at the right.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Erase(System.Int32,System.Int32,System.Int32)">
            <summary>
            Starting at the specified coordinate, clears the glyph, mirror, and decorators, for the specified count of cells.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <param name="count">The count of glyphs to erase.</param>
            <returns>The cells processed by this method.</returns>
            <remarks>
            Cells altered by this method has the <see cref="P:SadConsole.ColoredGlyph.Glyph"/> set to <see cref="P:SadConsole.CellSurface.EraseGlyph"/>, the <see cref="P:SadConsole.ColoredGlyph.Decorators"/> array reset, and the <see cref="P:SadConsole.ColoredGlyph.Mirror"/> set to <see cref="F:SadConsole.Mirror.None"/>.
            </remarks>
        </member>
        <member name="M:SadConsole.CellSurface.Erase(System.Int32,System.Int32)">
            <summary>
            Clears the glyph, mirror, and decorators, for the specified cell.
            </summary>
            <param name="x">The x position.</param>
            <param name="y">The y position.</param>
            <remarks>
            The cell altered by this method has the <see cref="P:SadConsole.ColoredGlyph.Glyph"/> set to <see cref="P:SadConsole.CellSurface.EraseGlyph"/>, the <see cref="P:SadConsole.ColoredGlyph.Decorators"/> array reset, and the <see cref="P:SadConsole.ColoredGlyph.Mirror"/> set to <see cref="F:SadConsole.Mirror.None"/>.
            </remarks>
        </member>
        <member name="M:SadConsole.CellSurface.Erase">
            <summary>
            Erases all cells which clears the glyph, mirror, and decorators.
            </summary>
            <remarks>
            All cells have <see cref="P:SadConsole.ColoredGlyph.Glyph"/> set to <see cref="P:SadConsole.CellSurface.EraseGlyph"/>, the <see cref="P:SadConsole.ColoredGlyph.Decorators"/> array reset, and the <see cref="P:SadConsole.ColoredGlyph.Mirror"/> set to <see cref="F:SadConsole.Mirror.None"/>.
            </remarks>
        </member>
        <member name="M:SadConsole.CellSurface.Clear">
            <summary>
            Clears the console data. Characters are reset to 0, the foreground and background are set to default, and mirror set to none. Clears cell decorators.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.Clear(System.Int32,System.Int32)">
            <summary>
            Clears a cell. Character is reset to 0, the foreground and background is set to default, and mirror is set to none. Clears cell decorators.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Clear(System.Int32,System.Int32,System.Int32)">
            <summary>
            Clears a segment of cells, starting from the left, extending to the right, and wrapping if needed. Character is reset to 0, the foreground and background is set to default, and mirror is set to none. Clears cell decorators.
            </summary>
            <param name="x">The x position of the left end of the segment.</param>
            <param name="y">The y position of the segment.</param>
            <param name="length">The length of the segment. If it extends beyond the line, it will wrap to the next line. If it extends beyond the console, then it automatically ends at the last valid cell.</param>
            <remarks>This works similarly to printing a string of whitespace</remarks>
        </member>
        <member name="M:SadConsole.CellSurface.Clear(SadRogue.Primitives.Rectangle)">
            <summary>
            Clears an area of cells. Character is reset to 0, the foreground and background is set to default, and mirror is set to none. Clears cell decorators.
            </summary>
            <param name="area">The area to clear.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Fill(System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{System.Int32},System.Nullable{SadConsole.Mirror})">
            <summary>
            Fills the console. Clears cell decorators.
            </summary>
            <param name="foreground">Foreground to apply. If null, skips.</param>
            <param name="background">Foreground to apply. If null, skips.</param>
            <param name="glyph">Glyph to apply. If null, skips.</param>
            <param name="mirror">Mirror to apply. If null, skips.</param>
            <returns>The array of all cells in this console, starting from the top left corner.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.Fill(System.Int32,System.Int32,System.Int32,System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{System.Int32},System.Nullable{SadConsole.Mirror})">
            <summary>
            Fills a segment of cells, starting from the left, extending to the right, and wrapping if needed. Clears cell decorators.
            </summary>
            <param name="x">The x position of the left end of the segment. </param>
            <param name="y">The y position of the segment.</param>
            <param name="length">The length of the segment. If it extends beyond the line, it will wrap to the next line. If it extends beyond the console, then it automatically ends at the last valid cell.</param>
            <param name="foreground">Foreground to apply. If null, skips.</param>
            <param name="background">Background to apply. If null, skips.</param>
            <param name="glyph">Glyph to apply. If null, skips.</param>
            <param name="mirror">Mirror to apply. If null, skips.</param>
            <returns>An array containing the affected cells, starting from the top left corner. If x or y are out of bounds, nothing happens and an empty array is returned</returns>
        </member>
        <member name="M:SadConsole.CellSurface.Fill(SadRogue.Primitives.Rectangle,System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{System.Int32},System.Nullable{SadConsole.Mirror})">
            <summary>
            Fills the specified area. Clears cell decorators.
            </summary>
            <param name="area">The area to fill.</param>
            <param name="foreground">Foreground to apply. If null, skips.</param>
            <param name="background">Background to apply. If null, skips.</param>
            <param name="glyph">Glyph to apply. If null, skips.</param>
            <param name="mirror">Mirror to apply. If null, skips.</param>
            <returns>An array containing the affected cells, starting from the top left corner. If the area is out of bounds, nothing happens and an empty array is returned.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.DrawLine(SadRogue.Primitives.Point,SadRogue.Primitives.Point,System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{System.Int32},System.Nullable{SadConsole.Mirror})">
            <summary>
            Draws a line from <paramref name="start"/> to <paramref name="end"/>.
            </summary>
            <param name="start">Starting point of the line.</param>
            <param name="end">Ending point of the line.</param>
            <param name="foreground">Foreground to set. If null, skipped.</param>
            <param name="background">Background to set. If null, skipped.</param>
            <param name="glyph">Glyph to set. If null, skipped.</param>
            <param name="mirror">Mirror to set. If null, skipped.</param>
            <returns>A list of cells the line touched; ordered from first to last.</returns>
            <remarks>If no foreground, background, or glyph are specified, then the list of affected cells are returned but nothing is drawn.</remarks>
        </member>
        <member name="M:SadConsole.CellSurface.DrawBox(SadRogue.Primitives.Rectangle,SadConsole.ColoredGlyph,SadConsole.ColoredGlyph,System.Int32[])">
            <summary>
            Draws a box.
            </summary>
            <param name="area">The area of the box.</param>
            <param name="border">The border style.</param>
            <param name="fill">The fill style. If null, the box is not filled.</param>
            <param name="connectedLineStyle">The lien style of the border. If null, <paramref name="border"/> glyph is used.</param>
        </member>
        <member name="M:SadConsole.CellSurface.DrawCircle(SadRogue.Primitives.Rectangle,SadConsole.ColoredGlyph,SadConsole.ColoredGlyph)">
            <summary>
            Draws an ellipse.
            </summary>
            <param name="area">The area the ellipse </param>
            <param name="outer">The appearance of the outer line of the ellipse.</param>
            <param name="inner">The appearance of the inside of hte ellipse. If null, it will not be filled.</param>
        </member>
        <member name="M:SadConsole.CellSurface.ConnectLines">
            <summary>
            Connects all lines in a surface for both <see cref="F:SadConsole.CellSurface.ConnectedLineThin"/> and <see cref="F:SadConsole.CellSurface.ConnectedLineThick"/> styles.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.Copy(SadConsole.CellSurface)">
            <summary>
            Copies the contents of the cell surface to the destination.
            </summary>
            <remarks>If the sizes to not match, it will always start at 0,0 and work with what it can and move on to the next row when either surface runs out of columns being processed</remarks>
            <param name="destination">The destination surface.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Copy(SadConsole.CellSurface,System.Int32,System.Int32)">
            <summary>
            Copies the contents of the cell surface to the destination at the specified x,y.
            </summary>
            <param name="x">The x coordinate of the destination.</param>
            <param name="y">The y coordinate of the destination.</param>
            <param name="destination">The destination surface.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Copy(SadRogue.Primitives.Rectangle,SadConsole.CellSurface,System.Int32,System.Int32)">
            <summary>
            Copies an area of this cell surface to the destination surface.
            </summary>
            <param name="area">The area to copy.</param>
            <param name="destination">The destination surface.</param>
            <param name="destinationX">The x coordinate to copy to.</param>
            <param name="destinationY">The y coordinate to copy to.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Copy(System.Int32,System.Int32,System.Int32,System.Int32,SadConsole.CellSurface,System.Int32,System.Int32)">
            <summary>
            Copies the contents of this cell surface at the specified x,y coordinates to the destination, only with the specified BufferWidth and BufferHeight, and copies it to the specified <paramref name="destinationX"/> and <paramref name="destinationY"/> position.
            </summary>
            <param name="x">The x coordinate to start from.</param>
            <param name="y">The y coordinate to start from.</param>
            <param name="width">The BufferWidth to copy from.</param>
            <param name="height">The BufferHeight to copy from.</param>
            <param name="destination">The destination surface.</param>
            <param name="destinationX">The x coordinate to copy to.</param>
            <param name="destinationY">The y coordinate to copy to.</param>
        </member>
        <member name="M:SadConsole.CellSurface.Resize(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Resizes the surface to the specified width and height.
            </summary>
            <param name="width">The viewable width of the surface.</param>
            <param name="height">The viewable height of the surface.</param>
            <param name="bufferWidth">The maximum width of the surface.</param>
            <param name="bufferHeight">The maximum height of the surface.</param>
            <param name="clear">When <see langword="true"/>, resets every cell to the <see cref="P:SadConsole.CellSurface.DefaultForeground"/>, <see cref="P:SadConsole.CellSurface.DefaultBackground"/> and glyph 0.</param>
        </member>
        <member name="M:SadConsole.CellSurface.GetSubSurface(SadRogue.Primitives.Rectangle)">
            <summary>
            Returns a new surface instance from the current instance based on the <paramref name="view"/>.
            </summary>
            <param name="view">An area of the surface to create a view of.</param>
            <returns>A new surface</returns>
        </member>
        <member name="M:SadConsole.CellSurface.SetSurface``1(``0@,SadRogue.Primitives.Rectangle)">
            <summary>
            Remaps the cells of this surface to a view of the <paramref name="surface"/>.
            </summary>
            <typeparam name="T">The surface type.</typeparam>
            <param name="view">A view rectangle of the target surface.</param>
            <param name="surface">The target surface to map cells from.</param>
        </member>
        <member name="M:SadConsole.CellSurface.SetSurface(SadConsole.ColoredGlyph[]@,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Changes the cells of the surface to the provided array.
            </summary>
            <param name="cells">The cells to replace in this surface.</param>
            <param name="width">The viewable width of the surface.</param>
            <param name="height">The viewable height of the surface.</param>
            <param name="bufferWidth">The maximum width of the surface.</param>
            <param name="bufferHeight">The maximum height of the surface.</param>
        </member>
        <member name="M:SadConsole.CellSurface.FillWithRandomGarbage(System.Boolean)">
            <summary>
            Fills a console with random colors and glyphs.
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.GetIndexFromPoint(SadRogue.Primitives.Point)">
            <summary>
            Gets the index of a location on the surface by point.
            </summary>
            <param name="location">The location of the index to get.</param>
            <returns>The cell index.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetIndexFromPoint(System.Int32,System.Int32)">
            <summary>
            Gets the index of a location on the surface by coordinate.
            </summary>
            <param name="x">The x of the location.</param>
            <param name="y">The y of the location.</param>
            <returns>The cell index.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.GetPointFromIndex(System.Int32)">
            <summary>
            Gets the x,y of an index on the surface.
            </summary>
            <param name="index">The index to get.</param>
            <returns>The x,y as a <see cref="T:SadRogue.Primitives.Point"/>.</returns>
        </member>
        <member name="F:SadConsole.CellSurface.ConnectedLineThin">
            <summary>
            Glyph indexes for a thin line.
            </summary>
        </member>
        <member name="F:SadConsole.CellSurface.ConnectedLineThick">
            <summary>
            Glyph indexes for a thick line.
            </summary>
        </member>
        <member name="F:SadConsole.CellSurface.ConnectedLineThinExtended">
            <summary>
            Glyph indexes for a thin line using a SadConsole extended font.
            </summary>
        </member>
        <member name="F:SadConsole.CellSurface.ConnectedLineEmpty">
            <summary>
            Glyph indexes for an empty line 0. 
            </summary>
        </member>
        <member name="M:SadConsole.CellSurface.CreateLine(System.Int32)">
            <summary>
            Creates an array of glyphs that can be used as a connected line.
            </summary>
            <param name="singleGlyph">The glyph to use for the connected line array.</param>
            <returns>An array of glyphs.</returns>
        </member>
        <member name="M:SadConsole.CellSurface.ValidateLineStyle(System.Int32[]@)">
            <summary>
            Returns a value that indicates a line style array is not null and contains the required number of elements.
            </summary>
            <param name="connectedLineStyle">The array to check based on the <see cref="T:SadConsole.CellSurface.ConnectedLineIndex"/> enum.</param>
            <returns>True when the line style is correct.</returns>
        </member>
        <member name="T:SadConsole.CellSurface.ConnectedLineIndex">
            <summary>
            Array index enum for line glyphs.
            </summary>
        </member>
        <member name="T:SadConsole.ColoredGlyph">
            <summary>
            Represents an individual piece of a <see cref="T:SadConsole.CellSurface"/> containing a glyph, foreground color, background color, and a mirror effect.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.Decorators">
            <summary>
            Modifies the look of a cell with additional character. 
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.Foreground">
            <summary>
            The foreground color of this cell.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.Background">
            <summary>
            The background color of this cell.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.Glyph">
            <summary>
            The glyph index from a font for this cell.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.Mirror">
            <summary>
            The mirror effect for this cell.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.GlyphCharacter">
            <summary>
            The glyph.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.IsVisible">
            <summary>
            <see langword="true"/> when this cell should be drawn; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredGlyph.IsDirty">
            <summary>
            <see langword="true"/> when this cell needs to be redrawn; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor">
            <summary>
            Creates a cell with a white foreground, black background, glyph 0, and no mirror effect.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color)">
            <summary>
            Creates a cell with the specified foreground, black background, glyph 0, and no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a cell with the specified foreground, specified background, glyph 0, and no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32)">
            <summary>
            Creates a cell with the specified foreground, background, and glyph, with no mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32,SadConsole.Mirror)">
            <summary>
            Creates a cell with the specified foreground, background, glyph, and mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
            <param name="mirror">The mirror effect.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32,SadConsole.Mirror,System.Boolean)">
            <summary>
            Creates a cell with the specified foreground, background, glyph, mirror, and visibility.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
            <param name="mirror">The mirror effect.</param>
            <param name="isVisible">The visiblity of the glyph.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32,SadConsole.Mirror,System.Boolean,SadConsole.CellDecorator[])">
            <summary>
            Creates a cell with the specified foreground, background, glyph, and mirror effect.
            </summary>
            <param name="foreground">Foreground color.</param>
            <param name="background">Background color.</param>
            <param name="glyph">The glyph index.</param>
            <param name="mirror">The mirror effect.</param>
            <param name="isVisible">The visiblity of the glyph.</param>
            <param name="decorators">Decorators for the cell.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.CopyAppearanceTo(SadConsole.ColoredGlyph)">
            <summary>
            Copies the visual appearance to the specified cell. This includes foreground, background, glyph, and mirror effect.
            </summary>
            <param name="cell">The target cell to copy to.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.CopyAppearanceFrom(SadConsole.ColoredGlyph)">
            <summary>
            Sets the foreground, background, glyph, and mirror effect to the same as the specified cell.
            </summary>
            <param name="cell">The target cell to copy from.</param>
        </member>
        <member name="M:SadConsole.ColoredGlyph.Clear">
            <summary>
            Resets the foreground, background, glyph, and mirror effect.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredGlyph.Clone">
            <summary>
            Returns a new cell with the same properties as this one.
            </summary>
            <returns>The new cell.</returns>
        </member>
        <member name="M:SadConsole.ColoredGlyph.CreateArray(System.Int32)">
            <summary>
            Creates an array of colored glyphs.
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.ColoredString">
            <summary>
            Represents a string that has foreground and background colors for each character in the string.
            </summary>
        </member>
        <member name="T:SadConsole.ColoredString.ColoredGlyphEffect">
            <summary>
            A <see cref="T:SadConsole.ColoredGlyph"/> with a <see cref="T:SadConsole.Effects.ICellEffect"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.ColoredGlyphEffect.Effect">
            <summary>
            The effect of this cell.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.ColoredGlyphEffect.Clone">
            <summary>
            Creates a copy of this <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/>.
            </summary>
            <returns>A copy of this <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/>.</returns>
        </member>
        <member name="F:SadConsole.ColoredString.CustomProcessor">
            <summary>
            Custom processor called if any built in command is not triggerd. Signature is ("command", "sub command", existing glyphs, text surface, associated editor, command stacks).
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.CellSurface,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Creates a colored string by parsing commands embedded in the string.
            </summary>
            <param name="value">The string to parse.</param>
            <param name="surfaceIndex">Index of where this string will be printed.</param>
            <param name="surface">The surface the string will be printed to.</param>
            <param name="initialBehaviors">Any initial defaults.</param>
            <returns></returns>
        </member>
        <member name="P:SadConsole.ColoredString.Item(System.Int32)">
            <summary>
            Gets a <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/> from the string.
            </summary>
            <param name="index">The index in the string of the <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/>.</param>
            <returns>The colored glyph representing the character in the string.</returns>
        </member>
        <member name="P:SadConsole.ColoredString.String">
            <summary>
            Gets or sets the characters represneting this string. When set, first processes the string through <see cref="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.CellSurface,SadConsole.StringParser.ParseCommandStacks)"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ColoredString.Count">
            <summary>
            The total number of <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/> characters in the string.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreGlyph">
            <summary>
            When true, instructs a caller to not render the glyphs of the string.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreForeground">
            <summary>
            When true, instructs a caller to not render the foreground color.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreBackground">
            <summary>
            When true, instructs a caller to not render the background color.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreEffect">
            <summary>
            When true, instructs a caller to not render the <see cref="!:Effect"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ColoredString.IgnoreMirror">
            <summary>
            When true, instructs a caller to not render the mirror state.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor">
            <summary>
            Default constructor.
            </summary>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the ColoredString class with the specified blank characters.
            </summary>
            <param name="capacity">The number of blank characters.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value. Calls <see cref="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.CellSurface,SadConsole.StringParser.ParseCommandStacks)"/> first to process the string.
            </summary>
            <param name="value">The backing string.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadConsole.Mirror)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value, foreground and background colors, and a cell effect.
            </summary>
            <param name="value">The backing string.</param>
            <param name="foreground">The foreground color for each character.</param>
            <param name="background">The background color for each character.</param>
            <param name="mirror">The mirror for each character.</param>`
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(System.String,SadConsole.ColoredString.ColoredGlyphEffect)">
            <summary>
            Creates a new instance of the ColoredString class with the specified string value, foreground and background colors, and a cell effect.
            </summary>
            <param name="value">The backing string.</param>
            <param name="appearance">The appearance to use for each character.</param>
        </member>
        <member name="M:SadConsole.ColoredString.#ctor(SadConsole.ColoredString.ColoredGlyphEffect[])">
            <summary>
            Combines a <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/> array into a <see cref="T:SadConsole.ColoredString"/>.
            </summary>
            <param name="glyphs">The glyphs to combine.</param>
        </member>
        <member name="M:SadConsole.ColoredString.Clone">
            <summary>
            Returns a new <see cref="T:SadConsole.ColoredString"/> object by cloning this instance.
            </summary>
            <returns>A new <see cref="T:SadConsole.ColoredString"/> object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.SubString(System.Int32)">
            <summary>
            Returns a new <see cref="T:SadConsole.ColoredString"/> object using a substring of this instance from the index to the end.
            </summary>
            <param name="index">The index to copy the contents from.</param>
            <returns>A new <see cref="T:SadConsole.ColoredString"/> object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.SubString(System.Int32,System.Int32)">
            <summary>
            Returns a new <see cref="T:SadConsole.ColoredString"/> object using a substring of this instance.
            </summary>
            <param name="index">The index to copy the contents from.</param>
            <param name="count">The count of <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/> objects to copy.</param>
            <returns>A new <see cref="T:SadConsole.ColoredString"/> object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.SetEffect(SadConsole.Effects.ICellEffect)">
            <summary>
            Applies the referenced cell effect to every character in the colored string.
            </summary>
            <param name="effect">The effect to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetForeground(SadRogue.Primitives.Color)">
            <summary>
            Applies the referenced color to every character foreground in the colored string.
            </summary>
            <param name="color">The color to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.SetBackground(SadRogue.Primitives.Color)">
            <summary>
            Applies the referenced color to every character background in the colored string.
            </summary>
            <param name="color">The color to apply.</param>
        </member>
        <member name="M:SadConsole.ColoredString.ToString">
            <summary>
            Returns a string representing the glyphs in this object.
            </summary>
            <returns>A string composed of each glyph in this object.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.GetEnumerator">
            <summary>
            Gets an enumerator for the <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/> objects in this string.
            </summary>
            <returns>The enumerator in the string.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator for the <see cref="T:SadConsole.ColoredString.ColoredGlyphEffect"/> objects in this string.
            </summary>
            <returns>The enumerator in the string.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.op_Addition(SadConsole.ColoredString,SadConsole.ColoredString)">
            <summary>
            Combines two ColoredString objects into a single ColoredString object. Ignore* values are only copied when both strings Ignore* values match.
            </summary>
            <param name="string1">The left-side of the string.</param>
            <param name="string2">The right-side of the string.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.ColoredString.op_Addition(SadConsole.ColoredString,System.String)">
            <summary>
            Combines a colored string and string. The last colored glyph in the colored string is used for all of the characters in the added string.
            </summary>
            <param name="string1">The colored string.</param>
            <param name="string2">The string.</param>
            <returns>A new colored string instance.</returns>
        </member>
        <member name="M:SadConsole.ColoredString.op_Addition(System.String,SadConsole.ColoredString)">
            <summary>
            Combines a string and a colored string. The first colored glyph in the colored string is used for all of the characters in the added string.
            </summary>
            <param name="string1">The string.</param>
            <param name="string2">The colored string.</param>
            <returns>A new colored string instance.</returns>
        </member>
        <member name="T:SadConsole.Components.IComponent">
            <summary>
            A component that can be added to a <see cref="T:SadConsole.ScreenObject"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.IsUpdate">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IComponent.Update(SadConsole.ScreenObject)"/> method.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.IsDraw">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IComponent.Draw(SadConsole.ScreenObject)"/> method.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.IsMouse">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IComponent.ProcessMouse(SadConsole.ScreenObject,SadConsole.Input.MouseConsoleState,System.Boolean@)"/> method.
            </summary>
        </member>
        <member name="P:SadConsole.Components.IComponent.IsKeyboard">
            <summary>
            When <see langword="true"/>, indicates that this component calls the <see cref="M:SadConsole.Components.IComponent.ProcessKeyboard(SadConsole.ScreenObject,SadConsole.Input.Keyboard,System.Boolean@)"/> method.
            </summary>
        </member>
        <member name="M:SadConsole.Components.IComponent.Update(SadConsole.ScreenObject)">
            <summary>
            Called by a host on the update frame.
            </summary>
            <param name="host">The host calling the component.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.Draw(SadConsole.ScreenObject)">
            <summary>
            Called by a host on the draw frame.
            </summary>
            <param name="host">The host calling the component.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.ProcessMouse(SadConsole.ScreenObject,SadConsole.Input.MouseConsoleState,System.Boolean@)">
            <summary>
            Called by a host when the mouse is being processed.
            </summary>
            <param name="host">The host console.</param>
            <param name="state">The mouse state.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.ProcessKeyboard(SadConsole.ScreenObject,SadConsole.Input.Keyboard,System.Boolean@)">
            <summary>
            Called by a host when the keyboard is being processed.
            </summary>
            <param name="host">The host that added this component.</param>
            <param name="keyboard">The keyboard state.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.OnAdded(SadConsole.ScreenObject)">
            <summary>
            Called when the component is added to a host.
            </summary>
            <param name="host">The host that added the component.</param>
        </member>
        <member name="M:SadConsole.Components.IComponent.OnRemoved(SadConsole.ScreenObject)">
            <summary>
            Called when the component is removed from the host.
            </summary>
            <param name="host">The host that removed the component.</param>
        </member>
        <member name="T:SadConsole.Components.UpdateComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.Update(SadConsole.ScreenObject)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.UpdateComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.UpdateComponent.Update(SadConsole.ScreenObject)">
            <summary>
            Called by a host on the update frame.
            </summary>
            <param name="host">The host calling the component.</param>
        </member>
        <member name="M:SadConsole.Components.UpdateComponent.OnAdded(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.UpdateComponent.OnRemoved(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.DrawComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.Draw(SadConsole.ScreenObject)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.DrawComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.DrawComponent.Draw(SadConsole.ScreenObject)">
            <summary>
            Called by a host on the draw frame.
            </summary>
            <param name="host">The host calling the component.</param>
        </member>
        <member name="M:SadConsole.Components.DrawComponent.OnAdded(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.DrawComponent.OnRemoved(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.MouseConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.ProcessMouse(SadConsole.ScreenObject,SadConsole.Input.MouseConsoleState,System.Boolean@)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.MouseConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.MouseConsoleComponent.ProcessMouse(SadConsole.ScreenObject,SadConsole.Input.MouseConsoleState,System.Boolean@)">
            <summary>
            Called by a host when the mouse is being processed.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="state">The state of the mouse in relation to the console.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.MouseConsoleComponent.OnAdded(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.MouseConsoleComponent.OnRemoved(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.KeyboardConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.ProcessKeyboard(SadConsole.ScreenObject,SadConsole.Input.Keyboard,System.Boolean@)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.KeyboardConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.KeyboardConsoleComponent.ProcessKeyboard(SadConsole.ScreenObject,SadConsole.Input.Keyboard,System.Boolean@)">
            <summary>
            Called by a host when the keyboard is being processed.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="keyboard">The state of the keyboard.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.KeyboardConsoleComponent.OnAdded(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.KeyboardConsoleComponent.OnRemoved(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.InputConsoleComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.ProcessMouse(SadConsole.ScreenObject,SadConsole.Input.MouseConsoleState,System.Boolean@)"/> and <see cref="M:SadConsole.Components.IComponent.ProcessKeyboard(SadConsole.ScreenObject,SadConsole.Input.Keyboard,System.Boolean@)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.InputConsoleComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.ProcessKeyboard(SadConsole.ScreenObject,SadConsole.Input.Keyboard,System.Boolean@)">
            <summary>
            Called by a host when the keyboard is being processed.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="keyboard">The state of the keyboard.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.ProcessMouse(SadConsole.ScreenObject,SadConsole.Input.MouseConsoleState,System.Boolean@)">
            <summary>
            Called by a host when the mouse is being processed.
            </summary>
            <param name="host">The host calling the component.</param>
            <param name="state">The state of the mouse in relation to the console.</param>
            <param name="handled">When set to <see langword="true"/> informs the host caller that we handled the mouse and to stop others from handling.</param>
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.OnAdded(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.InputConsoleComponent.OnRemoved(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.LogicComponent">
            <summary>
            A base class that implements <see cref="M:SadConsole.Components.IComponent.Update(SadConsole.ScreenObject)"/> and <see cref="M:SadConsole.Components.IComponent.Draw(SadConsole.ScreenObject)"/> of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.LogicComponent.SortOrder">
            <summary>
            Indicates priority to other components.
            </summary>
        </member>
        <member name="M:SadConsole.Components.LogicComponent.Draw(SadConsole.ScreenObject)">
            <summary>
            Called by a host on the draw frame.
            </summary>
            <param name="host">The host calling the component.</param>
        </member>
        <member name="M:SadConsole.Components.LogicComponent.Update(SadConsole.ScreenObject)">
            <summary>
            Called by a host on the update frame.
            </summary>
            <param name="host">The host calling the component.</param>
        </member>
        <member name="M:SadConsole.Components.LogicComponent.OnAdded(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.LogicComponent.OnRemoved(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Components.ComponentBase">
            <summary>
            A base class that implements all of <see cref="T:SadConsole.Components.IComponent"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Components.ComponentBase.SortOrder">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Components.ComponentBase.IsUpdate">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Components.ComponentBase.IsDraw">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Components.ComponentBase.IsMouse">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Components.ComponentBase.IsKeyboard">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.ComponentBase.Draw(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.ComponentBase.Update(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.ComponentBase.ProcessKeyboard(SadConsole.ScreenObject,SadConsole.Input.Keyboard,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.ComponentBase.ProcessMouse(SadConsole.ScreenObject,SadConsole.Input.MouseConsoleState,System.Boolean@)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.ComponentBase.OnRemoved(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Components.ComponentBase.OnAdded(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Console.FocusedMode">
            <summary>
            How the console should handle becoming active.
            </summary>
        </member>
        <member name="P:SadConsole.Console.IsCursorDisabled">
            <summary>
            When <see langword="true"/>, indicates that the <see cref="P:SadConsole.Console.Cursor"/> cannot be used on this console; otherwise, <see langword="false"/>.
            </summary>
            <remarks>
            This property should only be used to indicate that this object can never use the <see cref="P:SadConsole.Console.Cursor"/>. To simply disable or enable the <see cref="P:SadConsole.Console.Cursor"/>, use <see cref="P:SadConsole.Cursor.IsEnabled"/> and <see cref="P:SadConsole.Cursor.IsVisible"/>.
            </remarks>
        </member>
        <member name="P:SadConsole.Console.Cursor">
            <summary>
            The private virtual cursor reference.
            </summary>
        </member>
        <member name="P:SadConsole.Console.AutoCursorOnFocus">
            <summary>
            Toggles the cursor as visible\hidden when the console if focused\unfocused.
            </summary>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new console with the specified width and height.
            </summary>
            <param name="width">The width of the console.</param>
            <param name="height">The height of the console.</param>
        </member>
        <member name="M:SadConsole.Console.#ctor(System.Int32,System.Int32,SadConsole.ColoredGlyph[])">
            <summary>
            Creates a new console with the specified width and height and an initial set of cells.
            </summary>
            <param name="width">The width of the console.</param>
            <param name="height">The height of the console.</param>
            <param name="initialCells">The cells to seed the cosnole.</param>
        </member>
        <member name="M:SadConsole.Console.OnVisibleChanged">
            <inheritdoc/>
        </member>
        <member name="P:SadConsole.Console.IsFocused">
            <summary>
            Gets or sets this console as the focused console for input.
            </summary>
        </member>
        <member name="M:SadConsole.Console.Update">
             <inheritdoc/>
        </member>
        <member name="M:SadConsole.Console.OnFocusLost">
            <summary>
            Called when this console's focus has been lost. Hides the <see cref="P:SadConsole.Console.Cursor"/> if <see cref="P:SadConsole.Console.AutoCursorOnFocus"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Console.OnFocused">
            <summary>
            Called when this console is focused. Shows the <see cref="P:SadConsole.Console.Cursor"/> if <see cref="P:SadConsole.Console.AutoCursorOnFocus"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Console.IsMouseOver">
            <summary>
            Indicates that the mouse is currently over this console.
            </summary>
        </member>
        <member name="P:SadConsole.Console.IsExclusiveMouse">
            <summary>
            Gets or sets whether or not this console has exclusive access to the mouse events.
            </summary>
        </member>
        <member name="P:SadConsole.Console.MoveToFrontOnMouseClick">
            <summary>
            When true, this console will move to the front of its parent console when the mouse is clicked.
            </summary>
        </member>
        <member name="P:SadConsole.Console.FocusOnMouseClick">
            <summary>
            When true, this console will set <see cref="P:SadConsole.Console.IsFocused"/> to true when the mouse is clicked.
            </summary>
        </member>
        <member name="E:SadConsole.Console.MouseButtonClicked">
            <summary>
            Raised when the a mouse button is clicked on this console.
            </summary>
        </member>
        <member name="E:SadConsole.Console.MouseMove">
            <summary>
            Raised when the mouse moves around the this console.
            </summary>
        </member>
        <member name="E:SadConsole.Console.MouseExit">
            <summary>
            Raised when the mouse exits this console.
            </summary>
        </member>
        <member name="E:SadConsole.Console.MouseEnter">
            <summary>
            Raised when the mouse enters this console.
            </summary>
        </member>
        <member name="M:SadConsole.Console.OnMouseEnter(SadConsole.Input.MouseConsoleState)">
            <summary>
            Raises the <see cref="E:SadConsole.Console.MouseEnter"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.Console.OnMouseExit(SadConsole.Input.MouseConsoleState)">
            <summary>
            Raises the <see cref="E:SadConsole.Console.MouseExit"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.Console.OnMouseMove(SadConsole.Input.MouseConsoleState)">
            <summary>
            Raises the <see cref="E:SadConsole.Console.MouseMove"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.Console.OnMouseLeftClicked(SadConsole.Input.MouseConsoleState)">
            <summary>
            Raises the <see cref="E:SadConsole.Console.MouseButtonClicked"/> event. Possibly moves the console to the top of it's parent's children collection.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.Console.OnRightMouseClicked(SadConsole.Input.MouseConsoleState)">
            <summary>
            Raises the <see cref="E:SadConsole.Console.MouseButtonClicked"/> event.
            </summary>
            <param name="state">Current mouse state in relation to this console.</param>
        </member>
        <member name="M:SadConsole.Console.LostMouse(SadConsole.Input.MouseConsoleState)">
            <summary>
            If the mouse is not over the console, causes the protected <see cref="M:SadConsole.Console.OnMouseExit(SadConsole.Input.MouseConsoleState)"/> method to run which raises the <see cref="E:SadConsole.Console.MouseExit"/> event.
            </summary>
            <param name="state"></param>
        </member>
        <member name="M:SadConsole.Console.ProcessMouse(SadConsole.Input.MouseConsoleState)">
            <summary>
            Processes the mouse.
            </summary>
            <param name="state">The mouse state related to this console.</param>
            <returns>True when the mouse is over this console and processing should stop.</returns>
        </member>
        <member name="M:SadConsole.Console.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Console.ActiveBehavior">
            <summary>
            How the console handles becoming focused and added to the <see cref="P:SadConsole.Global.FocusedConsoles"/> collection.
            </summary>
        </member>
        <member name="F:SadConsole.Console.ActiveBehavior.Set">
            <summary>
            Becomes the only active input object when focused.
            </summary>
        </member>
        <member name="F:SadConsole.Console.ActiveBehavior.Push">
            <summary>
            Pushes to the top of the stack when it becomes the active input object.
            </summary>
        </member>
        <member name="T:SadConsole.ComponentObjectCollection">
            <summary>
            Manages the parent and children relationship for <see cref="T:SadConsole.Console"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ComponentObjectCollection.IsLocked">
            <summary>
            When true, the collection cannot be modified.
            </summary>
        </member>
        <member name="P:SadConsole.ComponentObjectCollection.Item(System.Int32)">
            <summary>
            Gets or sets a child object for this collection.
            </summary>
            <param name="index">The index of the child object.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.ComponentObjectCollection.#ctor(SadConsole.Console)">
            <summary>
            Creates a new screen object collection and parents it to the <paramref name="owner"/> object.
            </summary>
            <param name="owner">The owning object of this collection.</param>
        </member>
        <member name="M:SadConsole.ComponentObjectCollection.Clear">
            <summary>
            Removes all consoles.
            </summary>
        </member>
        <member name="M:SadConsole.ComponentObjectCollection.Contains(SadConsole.Console)">
            <summary>
            Returns true if this console list contains the specified <paramref name="screen"/>.
            </summary>
            <param name="screen">The console to search for.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.ComponentObjectCollection.IsTop(SadConsole.Console)">
            <summary>
            When true, indicates that the <paramref name="screen"/> is at the top of the collection stack.
            </summary>
            <param name="screen">The screen object to check.</param>
            <returns>True when the object is on top.</returns>
        </member>
        <member name="M:SadConsole.ComponentObjectCollection.Add(SadConsole.Console)">
            <summary>
            Adds a new child object to this collection.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ComponentObjectCollection.IsLocked"/> property is set to true.</exception>
            <param name="screen">The child object.</param>
        </member>
        <member name="M:SadConsole.ComponentObjectCollection.Insert(System.Int32,SadConsole.Console)">
            <summary>
            Inserts a child object at the specified <paramref name="index"/>.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ComponentObjectCollection.IsLocked"/> property is set to true.</exception>
            <param name="index">The 0-based index to insert the object at.</param>
            <param name="screen">The child object.</param>
        </member>
        <member name="M:SadConsole.ComponentObjectCollection.Remove(SadConsole.Console)">
            <summary>
            Removes a new child object from this collection.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ComponentObjectCollection.IsLocked"/> property is set to true.</exception>
            <param name="screen">The child object.</param>
        </member>
        <member name="M:SadConsole.ComponentObjectCollection.MoveToTop(SadConsole.Console)">
            <summary>
            Moves the specified <paramref name="screen"/>  to the top of the collection.
            </summary>
            <param name="screen">The child object.</param>
        </member>
        <member name="M:SadConsole.ComponentObjectCollection.MoveToBottom(SadConsole.Console)">
            <summary>
            Moves the specified <paramref name="screen"/>  to the bottom of the collection.
            </summary>
            <param name="screen">The child object.</param>
        </member>
        <member name="M:SadConsole.ComponentObjectCollection.IndexOf(SadConsole.Console)">
            <summary>
            Gets the 0-based index of the <paramref name="screen"/>.
            </summary>
            <param name="screen">The child object.</param>
        </member>
        <member name="M:SadConsole.ComponentObjectCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Cursor">
            <summary>
            A cursor that is attached to a <see cref="T:SadConsole.Console"/> used for printing.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.CursorRenderCell">
            <summary>
            Cell used to render the cursor on the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.PrintAppearance">
            <summary>
            Appearance used when printing text.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.PrintEffect">
            <summary>
            This effect is applied to each cell printed by the cursor.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.CursorEffect">
            <summary>
            This is the cursor visible effect, like blinking.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.PrintOnlyCharacterData">
            <summary>
            When true, indicates that the cursor, when printing, should not use the <see cref="P:SadConsole.Cursor.PrintAppearance"/> property in determining the color/effect of the cell, but keep the cell the same as it was.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.IsVisible">
            <summary>
            Shows or hides the cursor. This does not affect how the cursor operates.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.IsEnabled">
            <summary>
            When true, allows the <see cref="M:SadConsole.Cursor.ProcessKeyboard(SadConsole.Input.Keyboard)"/> method to run.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.Position">
            <summary>
            Gets or sets the location of the cursor on the console.
            </summary>
        </member>
        <member name="F:SadConsole.Cursor.DisableWordBreak">
            <summary>
            When true, prevents the any print method from breaking words up by spaces when wrapping lines.
            </summary>
        </member>
        <member name="F:SadConsole.Cursor.UseLinuxLineEndings">
            <summary>
            Enables linux-like string parsing where a \n behaves like a \r\n.
            </summary>
        </member>
        <member name="F:SadConsole.Cursor.UseStringParser">
            <summary>
            Calls <see cref="M:SadConsole.ColoredString.Parse(System.String,System.Int32,SadConsole.CellSurface,SadConsole.StringParser.ParseCommandStacks)"/> to create a colored string when using <see cref="M:SadConsole.Cursor.Print(System.String)"/> or <see cref="!:Print(string, Cell, ICellEffect)"/>
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.Row">
            <summary>
            Gets or sets the row of the cursor postion.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.Column">
            <summary>
            Gets or sets the column of the cursor postion.
            </summary>
        </member>
        <member name="P:SadConsole.Cursor.AutomaticallyShiftRowsUp">
            <summary>
            Indicates that the when the cursor goes past the last cell of the console, that the rows should be shifted up when the cursor is automatically reset to the next line.
            </summary>
        </member>
        <member name="M:SadConsole.Cursor.#ctor(SadConsole.CellSurface)">
            <summary>
            Creates a new instance of the cursor class that will work with the specified console.
            </summary>
            <param name="console">The console this cursor will print on.</param>
        </member>
        <member name="M:SadConsole.Cursor.AttachSurface(SadConsole.CellSurface)">
            <summary>
            Sets the console this cursor is targetting.
            </summary>
            <param name="console">The console the cursor works with.</param>
        </member>
        <member name="M:SadConsole.Cursor.ResetCursorEffect">
            <summary>
            Resets the <see cref="P:SadConsole.Cursor.CursorRenderCell"/> back to the default.
            </summary>
        </member>
        <member name="M:SadConsole.Cursor.ResetAppearanceToConsole">
            <summary>
            Resets the cursor appearance to the console's default foreground and background.
            </summary>
            <returns>This cursor object.</returns>
            <exception cref="T:System.Exception">Thrown when the backing console's CellData is null.</exception>
        </member>
        <member name="M:SadConsole.Cursor.SetPrintAppearance(SadConsole.ColoredGlyph)">
            <summary>
            Sets <see cref="P:SadConsole.Cursor.PrintAppearance"/>.
            </summary>
            <param name="appearance">The appearance to set.</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Print(System.String)">
            <summary>
            Prints text to the console using the default print appearance.
            </summary>
            <param name="text">The text to print.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Print(System.String,SadConsole.ColoredGlyph,SadConsole.Effects.ICellEffect)">
            <summary>
            Prints text on the console.
            </summary>
            <param name="text">The text to print.</param>
            <param name="template">The way the text will look when it is printed.</param>
            <param name="templateEffect">Effect to apply to the text as its printed.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Print(SadConsole.ColoredString)">
            <summary>
            Prints text to the console using the appearance of the colored string.
            </summary>
            <param name="text">The text to print.</param>
            <returns>Returns this cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.CarriageReturn">
            <summary>
            Returns the cursor to the start of the current line.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.LineFeed">
            <summary>
            Moves the cursor down a line.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.NewLine">
            <summary>
            Calls the <see cref="M:SadConsole.Cursor.CarriageReturn"/> and <see cref="M:SadConsole.Cursor.LineFeed"/> methods in a single call.
            </summary>
            <returns>The current cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Move(SadRogue.Primitives.Point)">
            <summary>
            Moves the cursor to the specified position.
            </summary>
            <param name="position">The destination of the cursor.</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Move(System.Int32,System.Int32)">
            <summary>
            Moves the cursor to the specified position.
            </summary>
            <param name="x">The x (horizontal) of the position.</param>
            <param name="y">The x (vertical) of the position.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Cursor.Up(System.Int32)">
            <summary>
            Moves the cusor up by the specified amount of lines.
            </summary>
            <param name="amount">The amount of lines to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Down(System.Int32)">
            <summary>
            Moves the cusor down by the specified amount of lines.
            </summary>
            <param name="amount">The amount of lines to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Left(System.Int32)">
            <summary>
            Moves the cusor left by the specified amount of columns.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.LeftWrap(System.Int32)">
            <summary>
            Moves the cusor left by the specified amount of columns, wrapping the cursor if needed.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.Right(System.Int32)">
            <summary>
            Moves the cusor right by the specified amount of columns.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.RightWrap(System.Int32)">
            <summary>
            Moves the cusor right by the specified amount of columns, wrapping the cursor if needed.
            </summary>
            <param name="amount">The amount of columns to move the cursor</param>
            <returns>This cursor object.</returns>
        </member>
        <member name="M:SadConsole.Cursor.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Automates the cursor based on keyboard input.
            </summary>
            <param name="info">The state of the keyboard</param>
            <returns>Returns true when the keyboard caused the cursor to do something.</returns>
        </member>
        <member name="P:SadConsole.DoubleAnimation.EasingFunction">
            <summary>
            An easing method to apply to the value. The parameters passed in are: calculated value, starting value, ending value, and duration.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.Blink">
            <summary>
            Switches between the normal foreground of a cell and a specified color for an amount of time, and then repeats.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkSpeed">
            <summary>
            In seconds, how fast the fade in and fade out each are
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.UseCellBackgroundColor">
            <summary>
            When true, uses the current cells background color for fading instead of the value of <see cref="P:SadConsole.Effects.Blink.BlinkOutColor"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkOutColor">
            <summary>
            The color to fade out to.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Blink.BlinkCount">
            <summary>
            How many times to blink. The value of -1 represents forever.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Blink.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.BlinkGlyph">
            <summary>
            Switches between the glyph of a cell and a specified glyph for an amount of time, and then repeats.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.BlinkSpeed">
            <summary>
            In seconds, how fast the fade in and fade out each are
            </summary>
        </member>
        <member name="P:SadConsole.Effects.BlinkGlyph.GlyphIndex">
            <summary>
            The glyph index to blink into.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.BlinkGlyph.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.CellEffectBase">
            <summary>
            A base class for cell effects.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.CellEffectBase._delayFinished">
            <summary>
            A flag to indidcate that the delay timer has finished.
            </summary>
        </member>
        <member name="F:SadConsole.Effects.CellEffectBase._timeElapsed">
            <summary>
            The total time elapsed while processing the effect.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.IsFinished">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.CloneOnApply">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.StartDelay">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.RemoveOnFinished">
            <inheritdoc />
        </member>
        <member name="P:SadConsole.Effects.CellEffectBase.RestoreCellOnFinished">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.ApplyToCell(SadConsole.ColoredGlyph,SadConsole.Effects.EffectsManager.ColoredGlyphState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.Update(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.Restart">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.CellEffectBase.Clone">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.Delay">
            <summary>
            An effect that doesn't do anything but delays. Usually used with the <see cref="T:SadConsole.Effects.EffectsChain"/> effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Delay.Update(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Delay.ApplyToCell(SadConsole.ColoredGlyph,SadConsole.Effects.EffectsManager.ColoredGlyphState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Delay.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Delay.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.EffectsChain">
            <summary>
            Chains one effect after another.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsChain.Restart">
            <summary>
            Restarts the cell effect but does not reset it.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager">
            <summary>
            Effects manager for a text surface.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectsManager.Count">
            <summary>
            Gets the number of effects.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.#ctor(SadConsole.CellSurface)">
            <summary>
            Creates a new effects manager associated with a text surface.
            </summary>
            <param name="surface">Text surface to manage.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.SetEffect(SadConsole.ColoredGlyph,SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of a specific cell.
            </summary>
            <param name="cell">Cells to change the effect on.</param>
            <param name="effect">The effect to associate with the cell.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.SetEffect(System.Collections.Generic.IEnumerable{SadConsole.ColoredGlyph},SadConsole.Effects.ICellEffect)">
            <summary>
            Changes the effect of the <paramref name="cells"/> provided.
            </summary>
            <param name="cells">Cells to change the effect on.</param>
            <param name="effect">The effect to associate with the cell.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.GetEffect(SadConsole.ColoredGlyph)">
            <summary>
            Gets the effect of the specified cell.
            </summary>
            <param name="x">The x location of the cell.</param>
            <param name="y">The y location of the cell.</param>
            <returns>The effect.</returns>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.Remove(SadConsole.Effects.ICellEffect)">
            <summary>
            Removes an effect and associated cells from the manager.
            </summary>
            <param name="effect">Effect to remove.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.RemoveAll">
            <summary>
            Removes all effects and associated cells.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.UpdateEffects(System.Double)">
            <summary>
            Updates all known effects and applies them to their associated cells.
            </summary>
            <param name="timeElapsed">The time elapased since the last update.</param>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager.ColoredGlyphEffectData">
            <summary>
            Represents a mapping of a single effect and associated cells.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.EffectsManager.ColoredGlyphState">
            <summary>
            A <see cref="T:SadConsole.ColoredGlyph"/> with state information.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectsManager.ColoredGlyphState.Decorators">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyph.Decorators"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectsManager.ColoredGlyphState.Foreground">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyph.Foreground"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectsManager.ColoredGlyphState.Background">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyph.Background"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectsManager.ColoredGlyphState.Glyph">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyph.Glyph"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectsManager.ColoredGlyphState.Mirror">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyph.Mirror"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.EffectsManager.ColoredGlyphState.IsVisible">
            <summary>
            A copy of the <see cref="P:SadConsole.ColoredGlyph.IsVisible"/> property.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.ColoredGlyphState.#ctor(SadConsole.ColoredGlyph)">
            <summary>
            Creates a new state from a cell.
            </summary>
            <param name="cell">The colored glyph this state is a copy of.</param>
        </member>
        <member name="M:SadConsole.Effects.EffectsManager.ColoredGlyphState.RestoreState(SadConsole.ColoredGlyph@)">
            <summary>
            Restores the state of this cell from the <see cref="!:State"/> property.
            </summary>
        </member>
        <member name="T:SadConsole.Effects.Fade">
            <summary>
            Fades both the background and foreground to seperate colors.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.DestinationBackground">
            <summary>
            Gets or sets the color gradient used to fade for the cell background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.DestinationForeground">
            <summary>
            Gets or sets the color gradient used to fade for the cell background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeDuration">
            <summary>
            Gets or sets how long the fade takes to complete in seconds.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.Repeat">
            <summary>
            Gets or sets a value to indicate that the fade effect should repeat.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellForeground">
            <summary>
            Gets or sets a value to indicate that the color gradient used with the <see cref="P:SadConsole.Effects.Fade.DestinationForeground"/> should replace its first color stop with the cell's foreground color.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellBackground">
            <summary>
            Gets or sets a value to indicate that the color gradient used with the <see cref="P:SadConsole.Effects.Fade.DestinationBackground"/> should replace its first color stop with the cell's background color.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeForeground">
            <summary>
            Gets or sets a value to indicate that the fade effect should use the foreground color on the cell's foreground.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.FadeBackground">
            <summary>
            Gets or sets a value to indicate that the fade effect should use the background color on the cell's background.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.AutoReverse">
            <summary>
            Gets or sets a value to indicate that the fade effect should automatically reverse itself when it finishes going up the color spectrum. By setting this to true, and setting the <see cref="P:SadConsole.Effects.Fade.Repeat"/> property to true, you can create a pulse effect.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Fade.UseCellDestinationReverse">
            <summary>
            When <see cref="P:SadConsole.Effects.Fade.UseCellForeground"/> or <see cref="P:SadConsole.Effects.Fade.UseCellBackground"/> is set, and this is true, the last color in the fade will be set to the cell instead of the first.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Fade.ApplyToCell(SadConsole.ColoredGlyph,SadConsole.Effects.EffectsManager.ColoredGlyphState)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.Update(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.Clone">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Effects.Fade.ToString">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Effects.ICellEffect">
            <summary>
            The interface describing a cell effect
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.IsFinished">
            <summary>
            True when the effect is finished.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.CloneOnApply">
            <summary>
            Flags this effect to be cloned when applied to a cell instead of reused.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.StartDelay">
            <summary>
            A delay applied to the effect only when it first runs.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.RemoveOnFinished">
            <summary>
            When true, the effect should be disassociated with cells when it has finished processing.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.ICellEffect.RestoreCellOnFinished">
            <summary>
            When <see langword="true"/>, indicates the <see cref="T:SadConsole.Effects.EffectsManager"/> should restore the cell to its original state.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.ApplyToCell(SadConsole.ColoredGlyph,SadConsole.Effects.EffectsManager.ColoredGlyphState)">
            <summary>
            Applies the state of the effect to a cell.
            </summary>
            <param name="cell">The surface cell using this effect.</param>
            <param name="originalState">The state of the cell prior to the effect being applied.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Update(System.Double)">
            <summary>
            Updates the state of the effect.
            </summary>
            <param name="gameTimeSeconds">Time since the last call to this effect.</param>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Restart">
            <summary>
            Restarts the cell effect.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.ICellEffect.Clone">
            <summary>
            Returns a duplicate of this effect.
            </summary>
            <returns>A new copy of this effect.</returns>
        </member>
        <member name="T:SadConsole.Effects.Recolor">
            <summary>
            Recors the foreground or the background of a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.Foreground">
            <summary>
            The foreground color applied to a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.Background">
            <summary>
            The background color applied to a cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.DoForeground">
            <summary>
            When true, the <see cref="P:SadConsole.Effects.Recolor.Foreground"/> color will be applied to the cell.
            </summary>
        </member>
        <member name="P:SadConsole.Effects.Recolor.DoBackground">
            <summary>
            /// When true, the <see cref="P:SadConsole.Effects.Recolor.Background"/> color will be applied to the cell.
            </summary>
        </member>
        <member name="M:SadConsole.Effects.Recolor.ApplyToCell(SadConsole.ColoredGlyph,SadConsole.Effects.EffectsManager.ColoredGlyphState)">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.FocusedConsoleStack">
            <summary>
            A stack of consoles. The top-most of the stack is considered active and represented by the <see cref="P:SadConsole.FocusedConsoleStack.Console"/> property.
            </summary>
        </member>
        <member name="P:SadConsole.FocusedConsoleStack.Console">
            <summary>
            Gets the current active console.
            </summary>
        </member>
        <member name="F:SadConsole.FocusedConsoleStack.consoles">
            <summary>
            The stack of consoles for input processing.
            </summary>
        </member>
        <member name="M:SadConsole.FocusedConsoleStack.Clear">
            <summary>
            Clears all consoles from the active stack along with the current active console.
            </summary>
        </member>
        <member name="M:SadConsole.FocusedConsoleStack.Push(SadConsole.Console)">
            <summary>
            Adds another console to active stack, setting it as the active (top most in the stack) console.
            </summary>
            <param name="console"></param>
        </member>
        <member name="M:SadConsole.FocusedConsoleStack.Set(SadConsole.Console)">
            <summary>
            Replaces the top console (active console) with the provided instance. Sets <see cref="P:SadConsole.FocusedConsoleStack.Console"/> to this instance.
            </summary>
            <param name="console">The console to make active.</param>
        </member>
        <member name="M:SadConsole.FocusedConsoleStack.Pop(SadConsole.Console)">
            <summary>
            Removes the console from the active stack. If the instance is the current active console, the active console is set to the last console in the previous console.
            </summary>
            <param name="console">The console to remove.</param>
        </member>
        <member name="M:SadConsole.FocusedConsoleStack.Pop">
            <summary>
            Removes the top console from the stack.
            </summary>
        </member>
        <member name="T:SadConsole.Font">
            <summary>
            Represents a specific font size from a <see cref="!:FontMaster"/>.
            </summary>
        </member>
        <member name="T:SadConsole.Font.Sizes">
            <summary>
            The size options of a font.
            </summary>
        </member>
        <member name="F:SadConsole.Font.Sizes.Quarter">
            <summary>
            One quater the size of the font. (Original Width and Height * 0.25)
            </summary>
        </member>
        <member name="F:SadConsole.Font.Sizes.Half">
            <summary>
            Half the size of the font. (Original Width and Height * 0.50)
            </summary>
        </member>
        <member name="F:SadConsole.Font.Sizes.One">
            <summary>
            Exact size of the font. (Original Width and Height * 1.0)
            </summary>
        </member>
        <member name="F:SadConsole.Font.Sizes.Two">
            <summary>
            Two times the size of the font. (Original Width and Height * 2.0)
            </summary>
        </member>
        <member name="F:SadConsole.Font.Sizes.Three">
            <summary>
            Two times the size of the font. (Original Width and Height * 3.0)
            </summary>
        </member>
        <member name="F:SadConsole.Font.Sizes.Four">
            <summary>
            Two times the size of the font. (Original Width and Height * 4.0)
            </summary>
        </member>
        <member name="P:SadConsole.Font.SolidGlyphIndex">
            <summary>
            Which glyph index is considered completely solid. Used for shading.
            </summary>
        </member>
        <member name="P:SadConsole.Font.SolidGlyphRectangle">
            <summary>
            The rectangle associated with the <see cref="P:SadConsole.Font.SolidGlyphIndex"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Font.GlyphRects">
            <summary>
            A cached array of rectangles of individual glyphs.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Columns">
            <summary>
            How many columns are in the this font.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Rows">
            <summary>
            How many rows are in this font.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Name">
            <summary>
            The name of the font used when it is registered with the <see cref="P:SadConsole.Global.Fonts"/> collection.
            </summary>
        </member>
        <member name="P:SadConsole.Font.FilePath">
            <summary>
            The name of the image file as defined in the .font file.
            </summary>
        </member>
        <member name="P:SadConsole.Font.LoadedFilePath">
            <summary>
            The path to the .font definition file.
            </summary>
        </member>
        <member name="P:SadConsole.Font.GlyphHeight">
            <summary>
            The height of each glyph in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.Font.GlyphWidth">
            <summary>
            The width of each glyph in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.Font.GlyphPadding">
            <summary>
            The amount of pixels between glyphs.
            </summary>
        </member>
        <member name="P:SadConsole.Font.IsSadExtended">
            <summary>
            True when the font supports SadConsole extended decorators; otherwise false.
            </summary>
        </member>
        <member name="P:SadConsole.Font.Image">
            <summary>
            The texture used by the font.
            </summary>
        </member>
        <member name="P:SadConsole.Font.GlyphDefinitions">
            <summary>
            Standard decorators used by your app.
            </summary>
        </member>
        <member name="M:SadConsole.Font.GetDecorator(System.String,SadRogue.Primitives.Color)">
            <summary>
            Gets a <see cref="T:SadConsole.CellDecorator"/> by the <see cref="T:SadConsole.GlyphDefinition"/> defined by the font file.
            </summary>
            <param name="name">The name of the decorator to get.</param>
            <param name="color">The color to apply to the decorator.</param>
            <returns>The decorator instance.</returns>
            <remarks>If the decorator does not exist, <see cref="P:SadConsole.CellDecorator.Empty"/> is returned.</remarks>
        </member>
        <member name="M:SadConsole.Font.GetGlyphDefinition(System.String)">
            <summary>
            Gets a <see cref="T:SadConsole.GlyphDefinition"/> by name that is defined by the font file.
            </summary>
            <param name="name">The name of the glyph definition.</param>
            <returns>The glyph definition.</returns>
            <remarks>If the glyph definition doesn't exist, return s<see cref="P:SadConsole.GlyphDefinition.Empty"/>.</remarks>
        </member>
        <member name="M:SadConsole.Font.GetFontSize(SadConsole.Font.Sizes)">
            <summary>
            Gets the pixel size of a font based on a <see cref="T:SadConsole.Font.Sizes"/>.
            </summary>
            <param name="size">The desired size.</param>
            <returns>The width and height of a font cell.</returns>
        </member>
        <member name="M:SadConsole.Font.HasGlyphDefinition(System.String)">
            <summary>
            Returns <see langword="true"/> when the glyph has been defined by name.
            </summary>
            <param name="name">The name of the glyph</param>
            <returns><see langword="true"/> when the glyph name exists, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:SadConsole.Font.Generate">
            <summary>
            After the font has been loaded, (with the <see cref="P:SadConsole.Font.FilePath"/>, <see cref="P:SadConsole.Font.GlyphHeight"/>, and <see cref="P:SadConsole.Font.GlyphWidth"/> fields filled out) this method will create the actual texture.
            </summary>
        </member>
        <member name="M:SadConsole.Font.ConfigureRects">
            <summary>
            Builds the <see cref="P:SadConsole.Font.GlyphRects"/> array based on the current font settings.
            </summary>
        </member>
        <member name="M:SadConsole.Font.GetRenderRect(System.Int32,System.Int32,SadRogue.Primitives.Point)">
            <summary>
            Returns a rectangle that is positioned and sized based on the font and the cell position specified.
            </summary>
            <param name="x">The x-axis of the cell position.</param>
            <param name="y">The y-axis of the cell position.</param>
            <returns>A new rectangle.</returns>
        </member>
        <member name="M:SadConsole.Font.GetWorldPosition(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Gets the pixel position of a cell position based on the font size.
            </summary>
            <param name="position">The position to convert.</param>
            <returns>A new pixel point.</returns>
        </member>
        <member name="T:SadConsole.GameHost">
            <summary>
            Represents the SadConsole game engine.
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.Instance">
            <summary>
            Instance of the game host.
            </summary>
        </member>
        <member name="E:SadConsole.GameHost.FrameDraw">
            <summary>
            Raised when the game draws a frame.
            </summary>
        </member>
        <member name="E:SadConsole.GameHost.FrameUpdate">
            <summary>
            Raised when the game updates prior to drawing a frame.
            </summary>
        </member>
        <member name="F:SadConsole.GameHost.OnStart">
            <summary>
            A callback to run before the <see cref="M:SadConsole.GameHost.Run"/> method is called;
            </summary>
        </member>
        <member name="F:SadConsole.GameHost.OnEnd">
            <summary>
            A callback to run after the <see cref="M:SadConsole.GameHost.Run"/> method is called;
            </summary>
        </member>
        <member name="P:SadConsole.GameHost.DrawCalls">
            <summary>
            Draw calls registered for the next drawing frame.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.OnFrameDraw">
            <summary>
            Raises the <see cref="E:SadConsole.GameHost.FrameDraw"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.OnFrameUpdate">
            <summary>
            Raises the <see cref="E:SadConsole.GameHost.FrameUpdate"/> event.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.Run">
            <summary>
            Runs the game.
            </summary>
        </member>
        <member name="M:SadConsole.GameHost.GetTexture(System.String)">
            <summary>
            Gets a texture from the implemented host.
            </summary>
            <param name="resourcePath">The path to the texture to load.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.GameHost.GetTexture(System.IO.Stream)">
            <summary>
            Gets a texture from the implemented host.
            </summary>
            <param name="textureStream">A stream containing the texture.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.GameHost.GetDefaultRenderer(SadConsole.ScreenObjectSurface)">
            <summary>
            Gets the default <see cref="T:SadConsole.Renderers.IRenderer"/> implemented by the host.
            </summary>
            <param name="screenObject">The object to get a renderer for.</param>
            <returns>A renderer.</returns>
        </member>
        <member name="M:SadConsole.GameHost.GetKeyboardState">
            <summary>
            Gets the state of the keyboard from the implemented host.
            </summary>
            <returns>The state of the keyboard.</returns>
        </member>
        <member name="M:SadConsole.GameHost.GetMouseState">
            <summary>
            Gets the state of the mouse from the implemented host.
            </summary>
            <returns>The state of the mouse.</returns>
        </member>
        <member name="M:SadConsole.GameHost.LoadFont(System.String)">
            <summary>
            Loads a font from a file and adds it to the <see cref="!:Fonts"/> collection.
            </summary>
            <param name="font">The font file to load.</param>
            <returns>A master font that you can generate a usable font from.</returns>
        </member>
        <member name="M:SadConsole.GameHost.OpenStream(System.String,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens a file stream with the specified mode and access.
            </summary>
            <param name="file">The file to open.</param>
            <param name="mode">The mode for opening. Defaults to <see cref="F:System.IO.FileMode.Open"/>.</param>
            <param name="access">The type of access for the stream. Defaults to <see cref="F:System.IO.FileAccess.Read"/>.</param>
            <returns>The stream object.</returns>
        </member>
        <member name="M:SadConsole.GameHost.LoadEmbeddedFont">
            <summary>
            Loads the <c>IBM.font</c> built into the binary.
            </summary>
        </member>
        <member name="P:SadConsole.Global.Screen">
            <summary>
            The active screen processed by the game.
            </summary>
        </member>
        <member name="P:SadConsole.Global.Random">
            <summary>
            A global random number generator.
            </summary>
        </member>
        <member name="P:SadConsole.Global.UpdateFrameDelta">
            <summary>
            The elapsed time between now and the last update call.
            </summary>
        </member>
        <member name="P:SadConsole.Global.DrawFrameDelta">
            <summary>
            The elapsed time between now and the last draw call.
            </summary>
        </member>
        <member name="P:SadConsole.Global.GameRunningTotalTime">
            <summary>
            The total time the game has been running.
            </summary>
        </member>
        <member name="P:SadConsole.Global.Fonts">
            <summary>
            Collection of fonts. Used mainly by the deserialization system.
            </summary>
        </member>
        <member name="P:SadConsole.Global.DefaultFont">
            <summary>
            The default font for any type that does not provide a font.
            </summary>
        </member>
        <member name="P:SadConsole.Global.DefaultFontSize">
            <summary>
            The default font to use with <see cref="P:SadConsole.Global.DefaultFont"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Global.Keyboard">
            <summary>
            Global keyboard object used by SadConsole during the update frame.
            </summary>
        </member>
        <member name="P:SadConsole.Global.Mouse">
            <summary>
            Global mouse object used by SadConsole during the update frame.
            </summary>
        </member>
        <member name="P:SadConsole.Global.FocusedConsoles">
            <summary>
            The stack of focused consoles used by the mouse and keyboard.
            </summary>
        </member>
        <member name="T:SadConsole.GlyphDefinition">
            <summary>
            Represents a decorator (glyph and mirror) defined by a font.
            </summary>
        </member>
        <member name="P:SadConsole.GlyphDefinition.Empty">
            <summary>
            Gets a glyph definition that has -1 for the glyph.
            </summary>
        </member>
        <member name="P:SadConsole.GlyphDefinition.Glyph">
            <summary>
            The glyph of the decorator.
            </summary>
        </member>
        <member name="P:SadConsole.GlyphDefinition.Mirror">
            <summary>
            The mirror effect of the decorator.
            </summary>
        </member>
        <member name="M:SadConsole.GlyphDefinition.#ctor(System.Int32,SadConsole.Mirror)">
            <summary>
            Creates a new cell decorator instance.
            </summary>
            <param name="glyph"></param>
            <param name="mirror"></param>
        </member>
        <member name="M:SadConsole.GlyphDefinition.CreateCellDecorator(SadRogue.Primitives.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.CellDecorator"/> from this definition.
            </summary>
            <param name="foreground">The color of the decorator.</param>
            <returns>A new decorator instance.</returns>
        </member>
        <member name="M:SadConsole.GlyphDefinition.CreateCell(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredGlyph"/> from this definition.
            </summary>
            <param name="foreground">The foreground color of the cell.</param>
            <param name="background">The background color of the cell.</param>
            <returns>A new cell instance.</returns>
        </member>
        <member name="T:SadConsole.Mirror">
            <summary>
            The mirroring mode
            </summary>
        </member>
        <member name="F:SadConsole.Mirror.None">
            <summary>
            No mirroring set.
            </summary>
        </member>
        <member name="F:SadConsole.Mirror.Vertical">
            <summary>
            Mirror vertically.
            </summary>
        </member>
        <member name="F:SadConsole.Mirror.Horizontal">
            <summary>
            Mirror horizontally.
            </summary>
        </member>
        <member name="T:SadConsole.Input.AsciiKey">
            <summary>
            Represents the state of a single key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.Key">
            <summary>
            The key from MonoGame or XNA.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.Character">
            <summary>
            The keyboard character of the key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.TimeHeld">
            <summary>
            Total time the key has been held.
            </summary>
        </member>
        <member name="F:SadConsole.Input.AsciiKey.PostInitialDelay">
            <summary>
            Tracks if the key was previously held when calculating the <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.RemapVirtualKeys(SadConsole.Input.Keys,SadConsole.Input.IKeyboardState)">
            <summary>
             Does any necessary remapping for virtual keys.
            </summary>
            <param name="key"> The key to be remapped. </param>
            <returns> The remapped key. </returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Fill(SadConsole.Input.Keys,System.Boolean,SadConsole.Input.IKeyboardState)">
            <summary>
            Fills out the fields based on the MonoGame/XNA key.
            </summary>
            <param name="key">The key.</param>
            <param name="shiftPressed">Helps identify which <see cref="F:SadConsole.Input.AsciiKey.Character"/> to use while the key is pressed. For example, if <see cref="F:SadConsole.Input.Keys.A"/> is used the <see cref="F:SadConsole.Input.AsciiKey.Character"/> field will be either 'A' if <paramref name="shiftPressed"/> is true or 'a' if false.</param>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Get(SadConsole.Input.Keys,SadConsole.Input.IKeyboardState)">
            <summary>
            Shortcut to get the <see cref="T:SadConsole.Input.AsciiKey"/> for a specific MonoGame/XNA <see cref="T:SadConsole.Input.Keys"/> type. Shift is considered not pressed.
            </summary>
            <param name="key">The key.</param>
            <returns>The <see cref="T:SadConsole.Input.AsciiKey"/> of the <see cref="T:SadConsole.Input.Keys"/>.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Get(SadConsole.Input.Keys,System.Boolean,SadConsole.Input.IKeyboardState)">
            <summary>
            Shortcut to get the <see cref="T:SadConsole.Input.AsciiKey"/> for a specific MonoGame/XNA <see cref="T:SadConsole.Input.Keys"/> type.
            </summary>
            <param name="key">The key.</param>
            <param name="shiftPressed">If shift should be considered pressed or not.</param>
            <returns>The <see cref="T:SadConsole.Input.AsciiKey"/> of the <see cref="T:SadConsole.Input.Keys"/>.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Equality(SadConsole.Input.AsciiKey,SadConsole.Input.AsciiKey)">
            <summary>
            Checks if the two <see cref="T:SadConsole.Input.AsciiKey"/> types use the same <see cref="F:SadConsole.Input.AsciiKey.Key"/> if the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is 0. If the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is not 0, the <see cref="F:SadConsole.Input.AsciiKey.Character"/> is compared.
            </summary>
            <param name="left">First item to compare.</param>
            <param name="right">Second item to compare.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Inequality(SadConsole.Input.AsciiKey,SadConsole.Input.AsciiKey)">
            <summary>
            Compares if the <see cref="F:SadConsole.Input.AsciiKey.Character"/> field of two <see cref="T:SadConsole.Input.AsciiKey"/> instances are the same.
            </summary>
            <param name="left">First item to compare.</param>
            <param name="right">Second item to compare.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Equality(SadConsole.Input.AsciiKey,SadConsole.Input.Keys)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type uses the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <param name="right">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> matches.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Inequality(SadConsole.Input.AsciiKey,SadConsole.Input.Keys)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type does not use the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <param name="right">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> does not match.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Equality(SadConsole.Input.Keys,SadConsole.Input.AsciiKey)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type uses the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <param name="right">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> matches.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.op_Inequality(SadConsole.Input.Keys,SadConsole.Input.AsciiKey)">
            <summary>
            Checks if the a <see cref="T:SadConsole.Input.AsciiKey"/> type does not use the indicated <see cref="F:SadConsole.Input.AsciiKey.Key"/>.
            </summary>
            <param name="left">The <see cref="F:SadConsole.Input.AsciiKey.Key"/> to compare.</param>
            <param name="right">The <see cref="T:SadConsole.Input.AsciiKey"/> to compare.</param>
            <returns>True when <see cref="F:SadConsole.Input.AsciiKey.Key"/> does not match.</returns>
        </member>
        <member name="M:SadConsole.Input.AsciiKey.Equals(System.Object)">
            <summary>
            Compares references.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="T:SadConsole.Input.IKeyboardState">
            <summary>
            Holds the state of keystrokes by a keyboard.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IKeyboardState.CapsLock">
            <summary>
            Gets the current state of the Caps Lock key.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IKeyboardState.NumLock">
            <summary>
            Gets the current state of the Num Lock key.
            </summary>
        </member>
        <member name="M:SadConsole.Input.IKeyboardState.IsKeyDown(SadConsole.Input.Keys)">
            <summary>
            Gets whether given key is currently being pressed.
            </summary>
            <param name="key">The key to query.</param>
            <returns>true if the key is pressed; false otherwise.</returns>
        </member>
        <member name="M:SadConsole.Input.IKeyboardState.IsKeyUp(SadConsole.Input.Keys)">
            <summary>
            Gets whether given key is currently being not pressed.
            </summary>
            <param name="key">The key to query.</param>
            <returns>true if the key is not pressed; false otherwise.</returns>
        </member>
        <member name="M:SadConsole.Input.IKeyboardState.GetPressedKeys">
            <summary>
            Returns an array of values holding keys that are currently being pressed.
            </summary>
            <returns>The keys that are currently being pressed.</returns>
        </member>
        <member name="T:SadConsole.Input.IMouseState">
            <summary>
            Reports the state of the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.IsLeftButtonDown">
            <summary>
            <see langword="true"/>  when the left mouse button is pressed; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.IsRightButtonDown">
            <summary>
            <see langword="true"/>  when the right mouse button is pressed; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.IsMiddleButtonDown">
            <summary>
            <see langword="true"/>  when the middle mouse button is pressed; otherwise, <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.ScreenPosition">
            <summary>
            The pixel position of the mouse on the screen relative to the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Input.IMouseState.MouseWheel">
            <summary>
            The value of the mousewheel.
            </summary>
        </member>
        <member name="T:SadConsole.Input.Keyboard">
            <summary>
            Represents the state of the keyboard.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysPressed">
            <summary>
            A collection of keys registered as pressed which behaves like a command prompt when holding down keys. 
            Uses the <see cref="F:SadConsole.Input.Keyboard.RepeatDelay"/> and <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/> settings.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysDown">
            <summary>
            A collection of keys currently held down.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Keyboard.KeysReleased">
            <summary>
            A collection of keys that were just released this frame.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keyboard.RepeatDelay">
            <summary>
            How often a key is included in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection after the <see cref="F:SadConsole.Input.Keyboard.InitialRepeatDelay"/> time has passed.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keyboard.InitialRepeatDelay">
            <summary>
            The initial delay after a key is first pressed before it is included a second time (while held down) in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Keyboard.Clear">
            <summary>
            Clears the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/>, <see cref="P:SadConsole.Input.Keyboard.KeysDown"/>, <see cref="P:SadConsole.Input.Keyboard.KeysReleased"/> collections.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyUp(SadConsole.Input.Keys)">
            <summary>
            Returns true if the key is not in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is not being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyUp(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true if the key is not in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is not being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyDown(SadConsole.Input.Keys)">
            <summary>
            Returns true if the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyDown(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true if the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysDown"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key is being pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyReleased(SadConsole.Input.Keys)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysReleased"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was released this update frame.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyReleased(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysReleased"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was released this update frame.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyPressed(SadConsole.Input.Keys)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection regardless of shift state.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was considered first pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.IsKeyPressed(SadConsole.Input.AsciiKey)">
            <summary>
            Returns true when the key is in the <see cref="P:SadConsole.Input.Keyboard.KeysPressed"/> collection.
            </summary>
            <param name="key">The key to check.</param>
            <returns>True when the key was considered first pressed.</returns>
        </member>
        <member name="M:SadConsole.Input.Keyboard.Update(System.TimeSpan)">
            <summary>
            Reads the keyboard state from <see cref="M:SadConsole.GameHost.GetKeyboardState"/>.
            </summary>
            <param name="elapsedSeconds">Fractional seconds passed since Update was called.</param>
        </member>
        <member name="T:SadConsole.Input.Keys">
            <summary>
            Defines the keys on a keyboard.
            </summary>	
        </member>
        <member name="F:SadConsole.Input.Keys.None">
            <summary>
            Reserved.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Back">
            <summary>
            BACKSPACE key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Tab">
            <summary>
            TAB key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Enter">
            <summary>
            ENTER key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.CapsLock">
            <summary>
            CAPS LOCK key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Escape">
            <summary>
            ESC key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Space">
            <summary>
            SPACEBAR key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.PageUp">
            <summary>
            PAGE UP key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.PageDown">
            <summary>
            PAGE DOWN key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.End">
            <summary>
            END key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Home">
            <summary>
            HOME key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Left">
            <summary>
            LEFT ARROW key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Up">
            <summary>
            UP ARROW key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Right">
            <summary>
            RIGHT ARROW key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Down">
            <summary>
            DOWN ARROW key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Select">
            <summary>
            SELECT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Print">
            <summary>
            PRINT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Execute">
            <summary>
            EXECUTE key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.PrintScreen">
            <summary>
            PRINT SCREEN key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Insert">
            <summary>
            INS key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Delete">
            <summary>
            DEL key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Help">
            <summary>
            HELP key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D0">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D1">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D2">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D3">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D4">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D5">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D6">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D7">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D9">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.A">
            <summary>
            A key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.B">
            <summary>
            B key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.C">
            <summary>
            C key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.D">
            <summary>
            D key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.E">
            <summary>
            E key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F">
            <summary>
            F key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.G">
            <summary>
            G key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.H">
            <summary>
            H key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.I">
            <summary>
            I key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.J">
            <summary>
            J key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.K">
            <summary>
            K key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.L">
            <summary>
            L key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.M">
            <summary>
            M key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.N">
            <summary>
            N key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.O">
            <summary>
            O key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.P">
            <summary>
            P key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Q">
            <summary>
            Q key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.R">
            <summary>
            R key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.S">
            <summary>
            S key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.T">
            <summary>
            T key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.U">
            <summary>
            U key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.V">
            <summary>
            V key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.W">
            <summary>
            W key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.X">
            <summary>
            X key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Y">
            <summary>
            Y key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Z">
            <summary>
            Z key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LeftWindows">
            <summary>
            Left Windows key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.RightWindows">
            <summary>
            Right Windows key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Apps">
            <summary>
            Applications key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Sleep">
            <summary>
            Computer Sleep key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad0">
            <summary>
            Numeric keypad 0 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad1">
            <summary>
            Numeric keypad 1 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad2">
            <summary>
            Numeric keypad 2 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad3">
            <summary>
            Numeric keypad 3 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad4">
            <summary>
            Numeric keypad 4 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad5">
            <summary>
            Numeric keypad 5 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad6">
            <summary>
            Numeric keypad 6 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad7">
            <summary>
            Numeric keypad 7 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad8">
            <summary>
            Numeric keypad 8 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumPad9">
            <summary>
            Numeric keypad 9 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Multiply">
            <summary>
            Multiply key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Add">
            <summary>
            Add key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Separator">
            <summary>
            Separator key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Subtract">
            <summary>
            Subtract key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Decimal">
            <summary>
            Decimal key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Divide">
            <summary>
            Divide key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F1">
            <summary>
            F1 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F2">
            <summary>
            F2 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F3">
            <summary>
            F3 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F4">
            <summary>
            F4 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F5">
            <summary>
            F5 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F6">
            <summary>
            F6 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F7">
            <summary>
            F7 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F8">
            <summary>
            F8 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F9">
            <summary>
            F9 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F10">
            <summary>
            F10 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F11">
            <summary>
            F11 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F12">
            <summary>
            F12 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F13">
            <summary>
            F13 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F14">
            <summary>
            F14 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F15">
            <summary>
            F15 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F16">
            <summary>
            F16 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F17">
            <summary>
            F17 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F18">
            <summary>
            F18 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F19">
            <summary>
            F19 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F20">
            <summary>
            F20 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F21">
            <summary>
            F21 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F22">
            <summary>
            F22 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F23">
            <summary>
            F23 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.F24">
            <summary>
            F24 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.NumLock">
            <summary>
            NUM LOCK key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Scroll">
            <summary>
            SCROLL LOCK key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LeftShift">
            <summary>
            Left SHIFT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.RightShift">
            <summary>
            Right SHIFT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LeftControl">
            <summary>
            Left CONTROL key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.RightControl">
            <summary>
            Right CONTROL key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LeftAlt">
            <summary>
            Left ALT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.RightAlt">
            <summary>
            Right ALT key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserBack">
            <summary>
            Browser Back key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserForward">
            <summary>
            Browser Forward key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserRefresh">
            <summary>
            Browser Refresh key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserStop">
            <summary>
            Browser Stop key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserSearch">
            <summary>
            Browser Search key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserFavorites">
            <summary>
            Browser Favorites key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.BrowserHome">
            <summary>
            Browser Start and Home key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.VolumeMute">
            <summary>
            Volume Mute key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.VolumeDown">
            <summary>
            Volume Down key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.VolumeUp">
            <summary>
            Volume Up key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.MediaNextTrack">
            <summary>
            Next Track key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.MediaPreviousTrack">
            <summary>
            Previous Track key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.MediaStop">
            <summary>
            Stop Media key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.MediaPlayPause">
            <summary>
            Play/Pause Media key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LaunchMail">
            <summary>
            Start Mail key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.SelectMedia">
            <summary>
            Select Media key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LaunchApplication1">
            <summary>
            Start Application 1 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.LaunchApplication2">
            <summary>
            Start Application 2 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemSemicolon">
            <summary>
            The OEM Semicolon key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemPlus">
            <summary>
            For any country/region, the '+' key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemComma">
            <summary>
            For any country/region, the ',' key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemMinus">
            <summary>
            For any country/region, the '-' key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemPeriod">
            <summary>
            For any country/region, the '.' key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemQuestion">
            <summary>
            The OEM question mark key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemTilde">
            <summary>
            The OEM tilde key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemOpenBrackets">
            <summary>
            The OEM open bracket key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemPipe">
            <summary>
            The OEM pipe key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemCloseBrackets">
            <summary>
            The OEM close bracket key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemQuotes">
            <summary>
            The OEM singled/double quote key on a US standard keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Oem8">
            <summary>
            Used for miscellaneous characters; it can vary by keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemBackslash">
            <summary>
            The OEM angle bracket or backslash key on the RT 102 key keyboard.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ProcessKey">
            <summary>
            IME PROCESS key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Attn">
            <summary>
            Attn key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Crsel">
            <summary>
            CrSel key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Exsel">
            <summary>
            ExSel key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.EraseEof">
            <summary>
            Erase EOF key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Play">
            <summary>
            Play key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Zoom">
            <summary>
            Zoom key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Pa1">
            <summary>
            PA1 key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemClear">
            <summary>
            CLEAR key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ChatPadGreen">
            <summary>
            Green ChatPad key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ChatPadOrange">
            <summary>
            Orange ChatPad key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Pause">
            <summary>
            PAUSE key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ImeConvert">
            <summary>
            IME Convert key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.ImeNoConvert">
            <summary>
            IME NoConvert key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Kana">
            <summary>
            Kana key on Japanese keyboards.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.Kanji">
            <summary>
            Kanji key on Japanese keyboards.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemAuto">
            <summary>
            OEM Auto key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemCopy">
            <summary>
            OEM Copy key.
            </summary>
        </member>
        <member name="F:SadConsole.Input.Keys.OemEnlW">
            <summary>
            OEM Enlarge Window key.
            </summary>
        </member>
        <member name="T:SadConsole.Input.Mouse">
            <summary>
            The state of the mouse.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScreenPosition">
            <summary>
            The pixel position of the mouse on the screen.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.MiddleButtonDown">
            <summary>
            Indicates the middle mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.MiddleClicked">
            <summary>
            Indicates the middle mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.MiddleDoubleClicked">
            <summary>
            Inidcates the middle mouse button was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftButtonDown">
            <summary>
            Indicates the left mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftClicked">
            <summary>
            Indicates the left mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.LeftDoubleClicked">
            <summary>
            Inidcates the left mouse button was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightButtonDown">
            <summary>
            Indicates the right mouse button is currently being pressed.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightClicked">
            <summary>
            Indicates the right mouse button was clicked. (Held and then released)
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.RightDoubleClicked">
            <summary>
            Indicates the right mouse buttion was double-clicked within one second.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScrollWheelValue">
            <summary>
            The cumulative value of the scroll wheel. 
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.ScrollWheelValueChange">
            <summary>
            The scroll wheel value change between frames.
            </summary>
        </member>
        <member name="P:SadConsole.Input.Mouse.IsOnScreen">
            <summary>
            Indicates that the mouse is currently within the bounds of the rendering area.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.Update(System.TimeSpan)">
            <summary>
            Reads the mouse state from <see cref="M:SadConsole.GameHost.GetMouseState"/>.
            </summary>
            <param name="elapsedSeconds">Fractional seconds passed since Update was called.</param>
        </member>
        <member name="M:SadConsole.Input.Mouse.Clear">
            <summary>
            Clears the buttons, position, wheel information.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.Process">
            <summary>
            Builds information about the mouse state based on the <see cref="P:SadConsole.Global.FocusedConsoles"/> or <see cref="!:Global.CurrentScreen"/>. Should be called each frame.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.ClearLastMouseConsole">
            <summary>
            Unlocks the last console the mouse was locked to. Allows another conosle to become locked to the mouse.
            </summary>
        </member>
        <member name="M:SadConsole.Input.Mouse.IsMouseOverConsole(SadConsole.Console)">
            <summary>
            Returns true when the mouse is currently over the provided console.
            </summary>
            <param name="console">The console to check.</param>
            <returns>True or false indicating if the mouse is over the console.</returns>
        </member>
        <member name="M:SadConsole.Input.Mouse.Clone">
            <summary>
            Clones this mouse into a new object.
            </summary>
            <returns>A clone.</returns>
        </member>
        <member name="T:SadConsole.Input.MouseConsoleState">
            <summary>
            The state of the mouse.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.Console">
            <summary>
            The console used to create the mouse state.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.Mouse">
            <summary>
            The mouse data.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.Cell">
            <summary>
            The cell the mouse is over, from <see cref="F:SadConsole.Input.MouseConsoleState.Console"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.CellPosition">
            <summary>
            The position of the <see cref="F:SadConsole.Input.MouseConsoleState.Cell"/>.  
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.ConsoleCellPosition">
            <summary>
            The position of the mouse on the <see cref="F:SadConsole.Input.MouseConsoleState.Console"/>, based on the <see cref="F:SadConsole.Input.MouseConsoleState.WorldCellPosition"/> and the position of the <see cref="F:SadConsole.Input.MouseConsoleState.Console"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.WorldCellPosition">
            <summary>
            A cell-based location of the mouse based on the screen, not the console.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.ConsolePixelPosition">
            <summary>
            The mouse position in pixels on the console.
            </summary>
        </member>
        <member name="F:SadConsole.Input.MouseConsoleState.IsOnConsole">
            <summary>
            Indicates that the mouse is within the bounds of <see cref="F:SadConsole.Input.MouseConsoleState.Console"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Input.MouseConsoleState.#ctor(SadConsole.Console,SadConsole.Input.Mouse)">
            <summary>
            Calculates a new <see cref="T:SadConsole.Input.MouseConsoleState"/> based on an <see cref="F:SadConsole.Input.MouseConsoleState.Console"/> and <see cref="F:SadConsole.Input.MouseConsoleState.Mouse"/> state.
            </summary>
            <param name="console">The console to process with the mouse state.</param>
            <param name="mouseData">The current mouse state.</param>
        </member>
        <member name="M:SadConsole.Input.MouseConsoleState.Clone">
            <summary>
            Creates a copy.
            </summary>
            <returns>A copy of this class instance.</returns>
        </member>
        <member name="T:SadConsole.Instructions.CodeInstruction">
            <summary>
            An instruction with a code callback.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.CodeInstruction.ID">
            <summary>
            Friendly ID to help track what this code instruction was created from since it cannot be fully serialized.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.CodeInstruction.#ctor(System.Func{SadConsole.ScreenObject,System.Boolean})">
            <summary>
            Creates a new instruction with the specified callback.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.CodeInstruction.Update(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.CodeInstruction.SetCallback(System.Func{SadConsole.ScreenObject,System.Boolean})">
            <summary>
            Sets the callback used by the instruction.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="T:SadConsole.Instructions.ConcurrentInstructions">
            <summary>
            Runs one or more instructions at the same time. This instruction completes when all added instructions have finished.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.ConcurrentInstructions.Instructions">
            <summary>
            The instructions to run concurrently.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.#ctor(System.Collections.Generic.IEnumerable{SadConsole.Instructions.InstructionBase})">
            <summary>
            Creates a new instruction that runs the provided instructions concurrently.
            </summary>
            <param name="instructions">The instructions</param>
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.Update(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.Repeat">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.ConcurrentInstructions.Reset">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Instructions.DrawString">
            <summary>
            Draws a string to a console as if someone was typing.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Text">
            <summary>
            Gets or sets the text to print.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.TotalTimeToPrint">
            <summary>
            Gets or sets the total time to take to write the string. Use zero for instant.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Position">
            <summary>
            Gets or sets the position on the console to write the text.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.DrawString.Cursor">
            <summary>
            Represents the cursor used in printing. Use this for styling and printing behavior.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.#ctor(SadConsole.CellSurface,SadConsole.ColoredString)">
            <summary>
            Draws a string on the specified surface.
            </summary>
            <param name="target">The target surface to use.</param>
            <param name="text">The text to print.</param>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.#ctor(SadConsole.ColoredString)">
            <summary>
            Draws a string on the surface passed to <see cref="M:SadConsole.Instructions.DrawString.Update(SadConsole.ScreenObject)"/>.
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.#ctor">
            <summary>
            Draws a string on the surface passed to <see cref="M:SadConsole.Instructions.DrawString.Update(SadConsole.ScreenObject)"/>. <see cref="P:SadConsole.Instructions.DrawString.Text"/> must be set manually.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.DrawString.Update(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.DrawString.Repeat">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.Instructions.FadeTextSurfaceTint">
            <summary>
            Animates a color change to <see cref="!:Console.Tint"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.FadeTextSurfaceTint.Colors">
            <summary>
            The color to fade the tint to.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.FadeTextSurfaceTint.FadeAnimationSettings">
            <summary>
            Animation provider.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.#ctor(SadConsole.ScreenObjectSurface,SadRogue.Primitives.ColorGradient,System.TimeSpan)">
            <summary>
            Creates a new tint fade instruction that targets the specified console.
            </summary>
            <param name="objectSurface">The <see cref="!:Console.Tint"/> to fade.</param>
            <param name="colors">The gradient pattern to fade through.</param>
            <param name="duration">How long the fade takes.</param>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.#ctor(SadRogue.Primitives.ColorGradient,System.TimeSpan)">
            <summary>
            Creates a new tint fade instruction that uses the console passed to <see cref="!:IConsoleComponent.Update(Console, TimeSpan)"/>.
            </summary>
            <param name="colors">The gradient pattern to fade through.</param>
            <param name="duration">How long the fade takes.</param>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.#ctor">
            <summary>
            Creates a new tint fade instruction with default settings that uses the console passed to <see cref="!:IConsoleComponent.Update(Console, TimeSpan)"/>.
            </summary>
            <remarks>
            The default settings are:
            
              - <see cref="P:SadConsole.Instructions.FadeTextSurfaceTint.Colors"/>: <see cref="P:SadRogue.Primitives.Color.White"/> to <see cref="P:SadRogue.Primitives.Color.Black"/>
              - <see cref="P:SadConsole.Instructions.FadeTextSurfaceTint.FadeAnimationSettings"/>: 1 second
            </remarks>
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.Update(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.FadeTextSurfaceTint.Reset">
            <summary>
            Starts the instruction over.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.InstructionBase">
            <summary>
            Base class for all instructions.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.Started">
            <summary>
            Raised when the instruction starts.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.Finished">
            <summary>
            Raised when the instruction completes.
            </summary>
        </member>
        <member name="E:SadConsole.Instructions.InstructionBase.Repeating">
            <summary>
            Raised when the instruction completes but is going to repeat.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.RemoveOnFinished">
            <summary>
            When true, this instruction will automatically remove itself from the parent's <see cref="!:SadConsole.Console.Components"/> collection.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.IsFinished">
            <summary>
            Flags the instruction as completed or not. If completed, the <see cref="E:SadConsole.Instructions.InstructionBase.Finished"/> event will be raised.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionBase.RepeatCount">
            <summary>
            Indicates how many times this set will repeat. Use 0 to not repeat and -1 to repeat forever.
            </summary>
            <remarks>This property counts down each time the instruction finishes. If set to -1 it will repeat forever. As this represents how many times to repeat, setting this value to 1 would allow the instruction to execute twice, once for the original time, and again for the repeat counter of 1.</remarks>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Reset">
            <summary>
            Resets the Done flag.
            </summary>
            <remarks>On the base class, resets the <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/> to false. Override this method to reset the derived class' counters and status flags for the instruction.</remarks>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Repeat">
            <summary>
            Repeats the current instruction. Decrements the <see cref="P:SadConsole.Instructions.InstructionBase.RepeatCount"/> value (if applicable), and raises the <see cref="E:SadConsole.Instructions.InstructionBase.Repeating"/> event. This method should be overridden in derived classes to customize how the object is reset for a repeat.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.Update(SadConsole.ScreenObject)">
            <summary>
            Executes the instruction. This base class method should be called from derived classes. If the IsFinished property is set to true, will try to repeat if needed and will raise all appropriate events.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnFinished(SadConsole.ScreenObject)">
            <summary>
            Called when the instruction finishes.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnRepeating">
            <summary>
            Called when the instruction repeats.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionBase.OnStarted">
            <summary>
            Called when the instruction first runs.
            </summary>
        </member>
        <member name="T:SadConsole.Instructions.InstructionSet">
            <summary>
            A set of instructions to be executed sequentially.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.Instructions">
            <summary>
            All instructions in this set.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.Name">
            <summary>
            The name of this instruction to identify it apart from other instruction sets.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.InstructionSet.CurrentInstruction">
            <summary>
            Represents the current instruction if this set is currently executing.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Reset">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Update(SadConsole.ScreenObject)">
            <summary>
            Runs the instruction set. Once all instructions are finished, this set will set the <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/> property will be set to <see langword="true"/>.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Wait(System.TimeSpan)">
            <summary>
            Adds a new <see cref="T:SadConsole.Instructions.Wait"/> instruction with the specified duration to the end of this set.
            </summary>
            <param name="duration">The time to wait.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Instruct(SadConsole.Instructions.InstructionBase)">
            <summary>
            Adds an instruction to the end of this set.
            </summary>
            <param name="instruction"></param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.Code(System.Func{SadConsole.ScreenObject,System.Boolean})">
            <summary>
            Adds a new <see cref="T:SadConsole.Instructions.CodeInstruction"/> instruction with the specified callback to the end of this set.
            </summary>
            <param name="expression">The code callback.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.WaitTrue(System.Func{System.Boolean})">
            <summary>
            Adds a new <see cref="T:SadConsole.Instructions.PredicateInstruction"/> instruction with the specified callback to the end of this set.
            </summary>
            <param name="expression">The code callback.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="M:SadConsole.Instructions.InstructionSet.InstructConcurrent(SadConsole.Instructions.InstructionBase[])">
            <summary>
            Adds a <see cref="T:SadConsole.Instructions.ConcurrentInstructions"/> to the end of this set.
            </summary>
            <param name="instructions">Instructions to add. Must be two or more instructions.</param>
            <returns>This instruction set.</returns>
        </member>
        <member name="T:SadConsole.Instructions.PredicateInstruction">
            <summary>
            Instruction that waits until the code callback returns <see langword="true"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.PredicateInstruction.ID">
            <summary>
            Friendly ID to help track what this code instruction was created from since it cannot be fully serialized.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.PredicateInstruction.#ctor(System.Func{System.Boolean})">
            <summary>
            Creates a new instruction with the specified callback.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.PredicateInstruction.Update(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.PredicateInstruction.SetCallback(System.Func{System.Boolean})">
            <summary>
            Sets the callback used by the instruction.
            </summary>
            <param name="callback">The code invoked by this instruction. Return <see langword="true"/> to set <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="T:SadConsole.Instructions.Wait">
            <summary>
            Represents an instruction to pause for a specified duration.
            </summary>
        </member>
        <member name="P:SadConsole.Instructions.Wait.Duration">
            <summary>
            The duration of the wait.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.Wait.#ctor(System.TimeSpan)">
            <summary>
            Creates a new wait timer with the specified duration.
            </summary>
            <param name="duration">How long this instruction waits until it signals <see cref="P:SadConsole.Instructions.InstructionBase.IsFinished"/>.</param>
        </member>
        <member name="M:SadConsole.Instructions.Wait.#ctor">
            <summary>
            Creates a new wait timer with a 1-second delay.
            </summary>
        </member>
        <member name="M:SadConsole.Instructions.Wait.Update(SadConsole.ScreenObject)">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.Instructions.Wait.Reset">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.NewOldValueEventArgs`1">
            <summary>
            Provides reference to the old and new objects.
            </summary>
        </member>
        <member name="F:SadConsole.NewOldValueEventArgs`1.OldObject">
            <summary>
            The previous object.
            </summary>
        </member>
        <member name="F:SadConsole.NewOldValueEventArgs`1.NewObject">
            <summary>
            The new object.
            </summary>
        </member>
        <member name="M:SadConsole.NewOldValueEventArgs`1.#ctor(`0,`0)">
            <summary>
            Creates a new instance of this object with the specified old and new parent.
            </summary>
            <param name="oldObject">The old parent.</param>
            <param name="newObject">The new parent.</param>
        </member>
        <member name="T:SadConsole.Renderers.IRenderer">
            <summary>
            Draws a surface.
            </summary>
        </member>
        <member name="M:SadConsole.Renderers.IRenderer.Attach(SadConsole.ScreenObjectSurface)">
            <summary>
            Called when the renderer is added to a surface.
            </summary>
            <param name="surfaceObject">The surface.</param>
        </member>
        <member name="M:SadConsole.Renderers.IRenderer.Detatch(SadConsole.ScreenObjectSurface)">
            <summary>
            Called when the renderer is removed from a surface.
            </summary>
            <param name="surfaceObject">The surface.</param>
        </member>
        <member name="M:SadConsole.Renderers.IRenderer.Refresh(SadConsole.ScreenObjectSurface)">
            <summary>
            Refreshes a cached drawing state.
            </summary>
            <param name="surfaceObject">The surface this renderer is attached to.</param>
        </member>
        <member name="M:SadConsole.Renderers.IRenderer.Render(SadConsole.ScreenObjectSurface)">
            <summary>
            Creates a drawcall in the drawing pipeline.
            </summary>
            <param name="surfaceObject">The surface this renderer is attached to.</param>
        </member>
        <member name="T:SadConsole.ScreenObject">
            <summary>
            A generic object processed by SadConsole. Provides parent/child, components, and position.
            </summary>
        </member>
        <member name="E:SadConsole.ScreenObject.ParentChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.ScreenObject.Parent"/> property changes.
            </summary>
        </member>
        <member name="E:SadConsole.ScreenObject.PositionChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.ScreenObject.Position"/> property changes.
            </summary>
        </member>
        <member name="E:SadConsole.ScreenObject.VisibleChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.ScreenObject.IsVisible"/> property changes.
            </summary>
        </member>
        <member name="E:SadConsole.ScreenObject.EnabledChanged">
            <summary>
            Raised when the <see cref="P:SadConsole.ScreenObject.IsEnabled"/> property changes.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsUpdate">
            <summary>
            A filtered list from <see cref="P:SadConsole.ScreenObject.Components"/> where <see cref="P:SadConsole.Components.IComponent.IsUpdate"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsDraw">
            <summary>
            A filtered list from <see cref="P:SadConsole.ScreenObject.Components"/> where <see cref="P:SadConsole.Components.IComponent.IsDraw"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsMouse">
            <summary>
            A filtered list from <see cref="P:SadConsole.ScreenObject.Components"/> where <see cref="P:SadConsole.Components.IComponent.IsMouse"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsKeyboard">
            <summary>
            A filtered list from <see cref="P:SadConsole.ScreenObject.Components"/> where <see cref="P:SadConsole.Components.IComponent.IsKeyboard"/> is <see langword="true"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObject.ComponentsEmpty">
            <summary>
            A filtered list from <see cref="P:SadConsole.ScreenObject.Components"/> that is not set for update, draw, mouse, or keyboard.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObject.Components">
            <summary>
            A collection of components processed by this console.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObject.Children">
            <summary>
            The child objects of this instance.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObject.Parent">
            <summary>
            The parent object that this instance is a child of.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObject.Position">
            <summary>
            The position of the object on the screen.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObject.AbsolutePosition">
            <summary>
            A position that is based on the current <see cref="P:SadConsole.ScreenObject.Position"/> and <see cref="P:SadConsole.ScreenObject.Parent"/> position, in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObject.IsVisible">
            <summary>
            Gets or sets the visibility of this object.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObject.IsEnabled">
            <summary>
            Gets or sets the visibility of this object.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObject.UseKeyboard">
            <summary>
            When <see langword="true"/>, this object will use the keyboard; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObject.UseMouse">
            <summary>
            When <see langword="true"/>, this object will use the mouse; otherwise <see langword="false"/>.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObject.#ctor">
            <summary>
            Creates a new instance of this class.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObject.Draw">
            <summary>
            Draws all <see cref="P:SadConsole.ScreenObject.Components"/> and <see cref="P:SadConsole.ScreenObject.Children"/>.
            </summary>
            <remarks>Only processes if <see cref="P:SadConsole.ScreenObject.IsVisible"/> is <see langword="true"/>.</remarks>
        </member>
        <member name="M:SadConsole.ScreenObject.Update">
            <summary>
            Updates all <see cref="P:SadConsole.ScreenObject.Components"/> and <see cref="P:SadConsole.ScreenObject.Children"/>.
            </summary>
            <remarks>Only processes if <see cref="!:IsPaused"/> is <see langword="false"/>.</remarks>
        </member>
        <member name="M:SadConsole.ScreenObject.ProcessKeyboard(SadConsole.Input.Keyboard)">
            <summary>
            Called by the engine to process the keyboard.
            </summary>
            <param name="keyboard">Keyboard information.</param>
            <returns>True when the keyboard had data and this console did something with it.</returns>
        </member>
        <member name="M:SadConsole.ScreenObject.GetComponents``1">
            <summary>
            Gets components of the specified types.
            </summary>
            <typeparam name="TComponent">THe component to find</typeparam>
            <returns>The components found.</returns>
        </member>
        <member name="M:SadConsole.ScreenObject.GetComponent``1">
            <summary>
            Gets the first component of the specified type.
            </summary>
            <typeparam name="TComponent">THe component to find</typeparam>
            <returns>The component if found, otherwise null.</returns>
        </member>
        <member name="M:SadConsole.ScreenObject.OnParentChanged(SadConsole.ScreenObject,SadConsole.ScreenObject)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenObject.ParentChanged"/> event.
            </summary>
            <param name="oldParent">The previous parent.</param>
            <param name="newParent">The new parent.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.OnPositionChanged(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Raises the <see cref="E:SadConsole.ScreenObject.PositionChanged"/> event.
            </summary>
            <param name="oldPosition">The previous position.</param>
            <param name="newPosition">The new position.</param>
        </member>
        <member name="M:SadConsole.ScreenObject.OnVisibleChanged">
            <summary>
            Called when the visibility of the object changes.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObject.OnEnabledChanged">
            <summary>
            Called when the paused status of the object changes.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObject.UpdateAbsolutePosition">
            <summary>
            Sets a value for <see cref="P:SadConsole.ScreenObject.AbsolutePosition"/> based on the <see cref="P:SadConsole.ScreenObject.Position"/> of this instance and the <see cref="P:SadConsole.ScreenObject.Parent"/> instance.
            </summary>
        </member>
        <member name="T:SadConsole.ScreenObjectCollection">
            <summary>
            Manages the parent and children relationship for <see cref="T:SadConsole.ScreenObject"/>.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObjectCollection.objects">
            <summary>
            Internal list of objects.
            </summary>
        </member>
        <member name="F:SadConsole.ScreenObjectCollection.owningObject">
            <summary>
            The parent object.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectCollection.Count">
            <summary>
            Returns the total number of objects in this collection.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectCollection.IsLocked">
            <summary>
            When true, the collection cannot be modified.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectCollection.Item(System.Int32)">
            <summary>
            Gets or sets a child object for this collection.
            </summary>
            <param name="index">The index of the child object.</param>
            <returns>The wanted object.</returns>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection.#ctor(SadConsole.ScreenObject)">
            <summary>
            Creates a new object collection and parents it to the <paramref name="owner"/> object.
            </summary>
            <param name="owner">The owning object of this collection.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection.Clear">
            <summary>
            Removes all consoles.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection.Contains(SadConsole.ScreenObject)">
            <summary>
            Returns true if this console list contains the specified <paramref name="obj"/>.
            </summary>
            <param name="obj">The console to search for.</param>
            <returns></returns>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection.IsTop(SadConsole.ScreenObject)">
            <summary>
            When true, indicates that the <paramref name="obj"/> is at the top of the collection stack.
            </summary>
            <param name="obj">The obj object to check.</param>
            <returns>True when the object is on top.</returns>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection.Add(SadConsole.ScreenObject)">
            <summary>
            Adds a new child object to this collection.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ScreenObjectCollection.IsLocked"/> property is set to true.</exception>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection.Insert(System.Int32,SadConsole.ScreenObject)">
            <summary>
            Inserts a child object at the specified <paramref name="index"/>.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ScreenObjectCollection.IsLocked"/> property is set to true.</exception>
            <param name="index">The 0-based index to insert the object at.</param>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection.Remove(SadConsole.ScreenObject)">
            <summary>
            Removes a new child object from this collection.
            </summary>
            <exception cref="T:System.Exception">Thrown when the <see cref="P:SadConsole.ScreenObjectCollection.IsLocked"/> property is set to true.</exception>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection.MoveToTop(SadConsole.ScreenObject)">
            <summary>
            Moves the specified <paramref name="obj"/>  to the top of the collection.
            </summary>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection.MoveToBottom(SadConsole.ScreenObject)">
            <summary>
            Moves the specified <paramref name="obj"/>  to the bottom of the collection.
            </summary>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection.IndexOf(SadConsole.ScreenObject)">
            <summary>
            Gets the 0-based index of the <paramref name="obj"/>.
            </summary>
            <param name="obj">The child object.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectCollection.GetEnumerator">
            <inheritdoc />
        </member>
        <member name="T:SadConsole.ScreenObjectSurface">
            <summary>
            An object that renders a <see cref="T:SadConsole.CellSurface"/>.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectSurface.Surface">
            <summary>
            The surface used by the screen object.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectSurface.IsDirty">
            <summary>
            Indicates the <see cref="P:SadConsole.ScreenObjectSurface.Surface"/> has changed and needs to be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectSurface.Renderer">
            <summary>
            The renderer used to draw this surface.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectSurface.Font">
            <summary>
            Font used with rendering.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectSurface.FontSize">
            <summary>
            The size of the <see cref="P:SadConsole.ScreenObjectSurface.Font"/> cells applied to the <see cref="P:SadConsole.ScreenObjectSurface.Surface"/> when rendering.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectSurface.Tint">
            <summary>
            A tint used in rendering.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectSurface.AbsoluteArea">
            <summary>
            The area on the screen this surface occupies. In pixels.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectSurface.UsePixelPositioning">
            <summary>
            Treats the <see cref="P:SadConsole.ScreenObject.Position"/> of the console as if it is pixels and not cells.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectSurface.WidthPixels">
            <summary>
            The width of the surface in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.ScreenObjectSurface.HeightPixels">
            <summary>
            The height of the surface in pixels.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObjectSurface.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new screen object that can render a surface.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectSurface.#ctor(System.Int32,System.Int32,SadConsole.ColoredGlyph[])">
            <summary>
            Creates a new screen object that can render a surface. Uses the specified cells to generate the surface.
            </summary>
            <param name="width">The width in cells of the surface.</param>
            <param name="height">The height in cells of the surface.</param>
            <param name="initialCells">The initial cells to seed the surface.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectSurface.#ctor(SadConsole.CellSurface)">
            <summary>
            Creates a new screen object using the specified surface.
            </summary>
            <param name="surface">The surface.</param>
        </member>
        <member name="M:SadConsole.ScreenObjectSurface.UpdateAbsolutePosition">
            <inheritdoc />
        </member>
        <member name="M:SadConsole.ScreenObjectSurface.Draw">
             <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObjectSurface.Update">
             <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObjectSurface.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:SadConsole.ScreenObjectSurface.Finalize">
            <summary>
            Disposes <see cref="P:SadConsole.ScreenObjectSurface.Renderer"/>.
            </summary>
        </member>
        <member name="M:SadConsole.ScreenObjectSurface.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:SadConsole.Serializer">
            <summary>
            Common serialization tasks for SadConsole.
            </summary>
        </member>
        <member name="M:SadConsole.Serializer.Save``1(``0,System.String,System.Boolean)">
            <summary>
            Serializes the <paramref name="instance"/> instance to the specified file.
            </summary>
            <typeparam name="T">Type of object to serialize</typeparam>
            <param name="instance">The object to serialize.</param>
            <param name="file">The file to save the object to.</param>
            <param name="compress">When true, uses GZIP compression on the json string saved to the <paramref name="file"/></param>
        </member>
        <member name="M:SadConsole.Serializer.Load``1(System.String,System.Boolean)">
            <summary>
            Deserializes a new instance of <typeparamref name="T"/> from the specified file.
            </summary>
            <typeparam name="T">The type of object to deserialize.</typeparam>
            <param name="file">The file to load from.</param>
            <param name="isCompressed">When true, indicates that the json <paramref name="file"/> should be decompressed with GZIP compression.</param>
            <returns>A new object instance.</returns>
        </member>
        <member name="T:SadConsole.Settings">
            <summary>
            Various settings for SadConsole.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DefaultConsoleUseKeyboard">
            <summary>
            Gets and sets the default value for <see cref="P:SadConsole.ScreenObject.UseKeyboard"/> when the console is created.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.ClearColor">
            <summary>
            The color to automatically clear the device with.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.ResizeMode">
            <summary>
            The type of resizing options for the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.AllowWindowResize">
            <summary>
            Allow the user to resize the window. Must be set before the game is created.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.UnlimitedFPS">
            <summary>
            Unlimited FPS when rendering (normally limited to 60fps). Must be set before the game is created.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoDraw">
            <summary>
            When true, indicates that the game loop should call <see cref="M:SadConsole.ScreenObject.Draw"/> on each object in <see cref="P:SadConsole.Global.Screen"/>.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoFinalDraw">
            <summary>
            When true, indicates that any game framework should render a composed image, of all consoles, to the screen.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.DoUpdate">
            <summary>
            When true, indicates that the game loop should call <see cref="M:SadConsole.ScreenObject.Update"/> on each object in <see cref="P:SadConsole.Global.Screen"/>.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.WindowMinimumSize">
            <summary>
            When not set to (0,0) this property specifies the minimum size of the game window in pixels.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.SerializationIsCompressed">
            <summary>
            When set to true, all loading and saving performed by SadConsole uses GZIP. <see cref="!:Global.LoadFont(string)"/> does not use this setting and always runs uncompressed.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.UseDefaultExtendedFont">
            <summary>
            When set to true, and a font is not specified with the <see cref="!:Game.Create(string, int, int, Action&lt;Game&gt;)"/> overload, the IBM 8x16 extended SadConsole font will be used.
            </summary>
        </member>
        <member name="T:SadConsole.Settings.Input">
            <summary>
            Settings related to input.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.Input.ProcessMouseOffscreen">
            <summary>
            Not currently used
            </summary>
        </member>
        <member name="T:SadConsole.Settings.Rendering">
            <summary>
            Rendering options generally set by a game host.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Rendering.RenderWidth">
            <summary>
            The width of the area to render on the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Rendering.RenderHeight">
            <summary>
            The height of the area to render on the game window.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Rendering.RenderRect">
            <summary>
            Where on the screen the engine will be rendered.
            </summary>
        </member>
        <member name="P:SadConsole.Settings.Rendering.RenderScale">
            <summary>
            If the <see cref="P:SadConsole.Settings.Rendering.RenderRect"/> is stretched, this is the ratio difference between unstretched.
            </summary>
        </member>
        <member name="T:SadConsole.Settings.WindowResizeOptions">
            <summary>
            Resize modes for the final SadConsole render pass.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Stretch">
            <summary>
            Stretches the output to fit the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Center">
            <summary>
            Centers output in the window.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Scale">
            <summary>
            Scales output to fit the window as best as possible while maintaining a good picture.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.Fit">
            <summary>
            Fits output to the window using padding to maintain aspect ratio.
            </summary>
        </member>
        <member name="F:SadConsole.Settings.WindowResizeOptions.None">
            <summary>
            Output always matches the window.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.CommandTypes">
            <summary>
            Command type of a <see cref="T:SadConsole.StringParser.ParseCommandBase"/>.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Foreground">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Foreground"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Background">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Background"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Glyph">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Glyph"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Mirror">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Mirror"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Effect">
            <summary>
            Command should be added to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.Effect"/> stack.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.PureCommand">
            <summary>
            Command runs on creation and is not added to anything in <see cref="T:SadConsole.StringParser.ParseCommandStacks"/>.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.CommandTypes.Invalid">
            <summary>
            Command is invalid and should not be processed at all.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandBase">
            <summary>
            Base class for a string processor behavior.
            </summary>
        </member>
        <member name="F:SadConsole.StringParser.ParseCommandBase.CommandType">
            <summary>
            Type of command.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandBase.Build(SadConsole.ColoredString.ColoredGlyphEffect@,SadConsole.ColoredString.ColoredGlyphEffect[],System.Int32,SadConsole.CellSurface,System.Int32@,System.String,SadConsole.StringParser.ParseCommandStacks)">
            <summary>
            Builds a glyph.
            </summary>
            <param name="glyphState">The current glyph being built.</param>
            <param name="glyphString">The current string of glyphs that has been processed until now.</param>
            <param name="surfaceIndex">Where on the surface this flyph will appear.</param>
            <param name="surface">The surface associated with the glyph.</param>
            <param name="stringIndex">Where in the original string this glyph is from.</param>
            <param name="processedString">The entire string being processed.</param>
            <param name="commandStack">The state of commands.</param>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandBlink">
            <summary>
            Blinks characters.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandSetGlyph">
            <summary>
            Prints a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandGradient">
            <summary>
            Recolors a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandMirror">
            <summary>
            Sets the mirror of a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandRecolor">
            <summary>
            Recolors a glyph.
            </summary>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandStacks">
            <summary>
            A list of behaviors applied as a string is processed.
            </summary>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandStacks.AddSafe(SadConsole.StringParser.ParseCommandBase)">
            <summary>
            Adds a behavior to the <see cref="F:SadConsole.StringParser.ParseCommandStacks.All"/> collection and the collection 
            based on the <see cref="F:SadConsole.StringParser.ParseCommandBase.CommandType"/> type.
            </summary>
            <param name="command"></param>
        </member>
        <member name="M:SadConsole.StringParser.ParseCommandStacks.RemoveSafe(SadConsole.StringParser.ParseCommandBase)">
            <summary>
            Removes a command from the appropriate command stack and from the <see cref="F:SadConsole.StringParser.ParseCommandStacks.All"/> stack.
            </summary>
            <param name="command">The command to remove</param>
        </member>
        <member name="T:SadConsole.StringParser.ParseCommandUndo">
            <summary>
            Pops a behavior off of a <see cref="T:SadConsole.StringParser.ParseCommandStacks"/>.
            </summary>
        </member>
        <member name="T:SadRogue.Primitives.ColorAnsi">
            <summary>
            Classic 16 ansi color values.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.Black">
            <summary>
            The black ansi color (0, 0, 0).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.Red">
            <summary>
            The Red ansi color (170, 0, 0).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.Green">
            <summary>
            The Green ansi color 0, 170, 0).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.Yellow">
            <summary>
            The Yellow ansi color (170, 85, 0).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.Blue">
            <summary>
            The Blue ansi color (0, 0, 170).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.Magenta">
            <summary>
            The Magenta ansi color (170, 0, 170).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.Cyan">
            <summary>
            The Cyan ansi color (0, 170, 170).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.White">
            <summary>
            The White ansi color (170, 170, 170).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.BlackBright">
            <summary>
            The BlackBright ansi color (85, 85, 85).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.RedBright">
            <summary>
            The RedBright ansi color (255, 85, 85).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.GreenBright">
            <summary>
            The GreenBright ansi color (85, 255, 85).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.YellowBright">
            <summary>
            The YellowBright ansi color (255, 255, 85).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.BlueBright">
            <summary>
            The BlueBright ansi color (85, 85, 255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.MagentaBright">
            <summary>
            The MagentaBright ansi color (255, 85, 255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.CyanBright">
            <summary>
            The CyanBright ansi color (85, 255, 255).
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorAnsi.WhiteBright">
            <summary>
            The WhiteBright ansi color (255, 255, 255).
            </summary>
        </member>
        <member name="T:SadRogue.Primitives.ColorExtensions">
            <summary>
            Various extension methods to <see cref="T:SadRogue.Primitives.Color"/> class.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorExtensions.ColorMappings">
            <summary>
            Custom color mappings for the <see cref="M:SadRogue.Primitives.ColorExtensions.FromParser(SadRogue.Primitives.Color,System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)"/> method.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.ToInteger(SadRogue.Primitives.Color)">
            <summary>
            Wrapper for <see cref="P:SadRogue.Primitives.Color.PackedValue"/>.
            </summary>
            <param name="color"></param>
            <returns></returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.LerpSteps(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Int32)">
            <summary>
            Creates an array of colors that includes the <paramref name="color"/> and <paramref name="endingColor"/> and <paramref name="steps"/> of colors between them.
            </summary>
            <param name="color">The starting color which will be at index 0 in the array.</param>
            <param name="endingColor">The ending color which will be at index `steps - 1` in the array.</param>
            <param name="steps">The gradient steps in the array which uses <see cref="M:SadRogue.Primitives.Color.Lerp(SadRogue.Primitives.Color,SadRogue.Primitives.Color,System.Single)"/>.</param>
            <returns>An array of colors.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.SetHSL(SadRogue.Primitives.Color,System.Single,System.Single,System.Single)">
            <summary>
            Sets the color values based on HSL instead of RGB.
            </summary>
            <param name="color">The color to change.</param>
            <param name="h">The hue amount.</param>
            <param name="s">The saturation amount.</param>
            <param name="l">The luminance amount.</param>
            <remarks>Taken from http://www.easyrgb.com/index.php?X=MATH&amp;H=19#text19 </remarks>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.GetRandomColor(SadRogue.Primitives.Color,System.Random)">
            <summary>
            Gets a random color.
            </summary>
            <param name="color">The color object to start with. Will be overridden.</param>
            <param name="random">A random object to get numbers from.</param>
            <returns>A new color.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.RedOnly(SadRogue.Primitives.Color)">
            <summary>
            Returns a new Color using only the Red value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the red channel set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.GreenOnly(SadRogue.Primitives.Color)">
            <summary>
            Returns a new Color using only the Green value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the green channel set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.BlueOnly(SadRogue.Primitives.Color)">
            <summary>
            Returns a new Color using only the Blue value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the blue channel set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.AlphaOnly(SadRogue.Primitives.Color)">
            <summary>
            Returns a new Color using only the Alpha value of this color.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with only the alpha channel set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.ClearRed(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the red channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the red channel cleared.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.ClearGreen(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the green channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the green channel cleared.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.ClearBlue(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the blue channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the blue channel cleared.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.ClearAlpha(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the alpha channel set to 0.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the alpha channel cleared.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.FillRed(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the red channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the red channel fully set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.FillGreen(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the green channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the green channel fully set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.FillBlue(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the blue channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the blue channel fully set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.FillAlpha(SadRogue.Primitives.Color)">
            <summary>
            Returns a new color with the alpha channel set to 255.
            </summary>
            <param name="color">Object instance.</param>
            <returns>A color with the alpha channel fully set.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.SetRed(SadRogue.Primitives.Color,System.Byte)">
            <summary>
            Returns a new color with the red channel set to the specified value.
            </summary>
            <param name="color">Object instance.</param>
            <param name="value">The new value for the red channel.</param>
            <returns>A color with the red channel altered.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.SetGreen(SadRogue.Primitives.Color,System.Byte)">
            <summary>
            Returns a new color with the green channel set to the specified value.
            </summary>
            <param name="color">Object instance.</param>
            <param name="value">The new value for the green channel.</param>
            <returns>A color with the green channel altered.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.SetBlue(SadRogue.Primitives.Color,System.Byte)">
            <summary>
            Returns a new color with the blue channel set to the specified value.
            </summary>
            <param name="color">Object instance.</param>
            <param name="value">The new value for the blue channel.</param>
            <returns>A color with the blue channel altered.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.SetAlpha(SadRogue.Primitives.Color,System.Byte)">
            <summary>
            Returns a new color with the alpha channel set to the specified value.
            </summary>
            <param name="color">Object instance.</param>
            <param name="value">The new value for the alpha channel.</param>
            <returns>A color with the alpha channel altered.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.GetLuma(SadRogue.Primitives.Color)">
            <summary>
            Gets the luma of an existing color.
            </summary>
            <param name="color">The color to calculate the luma from.</param>
            <returns>A value based on this code: (color.R + color.R + color.B + color.G + color.G + color.G) / 6f</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.GetBrightness(SadRogue.Primitives.Color)">
            <summary>
            Gets the brightness of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The brightness value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.GetSaturation(SadRogue.Primitives.Color)">
            <summary>
            Gets the saturation of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The saturation value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.GetHue(SadRogue.Primitives.Color)">
            <summary>
            Gets the hue of a color.
            </summary>
            <param name="color">The color to process.</param>
            <returns>The hue value.</returns>
            <remarks>Taken from the mono source code.</remarks>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.ToParser(SadRogue.Primitives.Color)">
            <summary>
            Converts a color to the format used by <see cref="!:SadConsole.ParseCommandRecolor"/> command.
            </summary>
            <param name="color">The color to convert.</param>
            <returns>A string in this format R,G,B,A so for <see cref="P:SadRogue.Primitives.Color.Green"/> you would get <code>0,128,0,255</code>.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorExtensions.FromParser(SadRogue.Primitives.Color,System.String,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@,System.Boolean@)">
            <summary>
            Gets a color in the format of <see cref="!:SadConsole.ParseCommandRecolor"/>.
            </summary>
            <param name="color"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:SadRogue.Primitives.ColorGradient">
            <summary>
            Represents a gradient with multiple color stops.
            </summary>
        </member>
        <member name="P:SadRogue.Primitives.ColorGradient.Stops">
            <summary>
            The color stops that define the gradient.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.#ctor(System.Collections.Generic.IEnumerable{SadRogue.Primitives.Color},System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Creates a new color gradient with the defined colors and stops.
            </summary>
            <param name="colors">The colors with the gradient.</param>
            <param name="stops">The gradient stops where the colors are used.</param>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.#ctor(SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a new color gradient with only two colors, the first at the start, and the second at the end.
            </summary>
            <param name="startingColor">The starting color of the gradient.</param>
            <param name="endingColor">The ending color of the gradient.</param>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.#ctor(SadRogue.Primitives.Color[])">
            <summary>
            Creates a new color gradient, evenly spacing them out. At least one color must be provided.
            </summary>
            <param name="colors">The colors to create a gradient from.</param>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.GetEnumerator">
            <summary>
            Gets an enumerator with all of the gradient stops.
            </summary>
            <returns>An enumerator</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets an enumerator with all of the gradient stops.
            </summary>
            <returns>An enumerator.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.ToColoredString(System.String)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object using the current gradient.
            </summary>
            <param name="text">The text to use for the colored string.</param>
            <returns>A new colored string object.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.ToColorArray(System.Int32)">
            <summary>
            Gets an array of colors based from the gradient.
            </summary>
            <param name="count">The amount of colors to produce.</param>
            <returns>An array of colors.</returns>
        </member>
        <member name="M:SadRogue.Primitives.ColorGradient.Lerp(System.Single)">
            <summary>
            Returns a color from this gradient at the specified lerp value.
            </summary>
            <param name="amount">The lerp amount.</param>
            <returns>A color.</returns>
        </member>
        <member name="T:SadRogue.Primitives.ColorGradientStop">
            <summary>
            A gradient stop. Defines a color and where it is located within the gradient.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorGradientStop.Color">
            <summary>
            The color.
            </summary>
        </member>
        <member name="F:SadRogue.Primitives.ColorGradientStop.Stop">
            <summary>
            The color stop in the gradiant this applies to.
            </summary>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.ConsoleLocationToPixel(SadRogue.Primitives.Point,System.Int32,System.Int32)">
            <summary>
            Translates a console cell position to where it appears on the screen in pixels.
            </summary>
            <param name="point">The current cell position.</param>
            <param name="cellWidth">The width of a cell in pixels.</param>
            <param name="cellHeight">The height of a cell in pixels.</param>
            <returns>The pixel position of the top-left of the cell.</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.ConsoleLocationToPixel(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Translates a console cell position to where it appears on the screen in pixels.
            </summary>
            <param name="point">The current cell position.</param>
            <param name="fontSize">The font to use in calculating the position.</param>
            <returns>The pixel position of the top-left of the cell.</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.PixelLocationToConsole(SadRogue.Primitives.Point,System.Int32,System.Int32)">
            <summary>
            Translates a pixel to where it appears on a console cell.
            </summary>
            <param name="point">The current world position.</param>
            <param name="cellWidth">The width of a cell in pixels.</param>
            <param name="cellHeight">The height of a cell in pixels.</param>
            <returns>The cell position on the screen.</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.PixelLocationToConsole(SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Translates a pixel to where it appears on a console cell.
            </summary>
            <param name="point">The current world position.</param>
            <param name="fontSize">The font to use in calculating the position.</param>
            <returns>The cell position on the screen.</returns>
        </member>
        <member name="M:SadRogue.Primitives.PointExtensions.TranslateFont(SadRogue.Primitives.Point,SadRogue.Primitives.Point,SadRogue.Primitives.Point)">
            <summary>
            Gets the cell coordinates of the <paramref name="targetFont"/> based on a cell in the <paramref name="sourceFontSize"/>.
            </summary>
            <param name="point">The position of the cell in the <paramref name="sourceFontSize"/>.</param>
            <param name="sourceFontSize">The source font translating from.</param>
            <param name="targetFontSize">The target font translating to.</param>
            <returns>The position of the cell in the <paramref name="targetFontSize"/>.</returns>
        </member>
        <member name="T:System.StringExtensions">
            <summary>
            Helpers for strings.
            </summary>
        </member>
        <member name="M:System.StringExtensions.Align(System.String,SadConsole.HorizontalAlignment,System.Int32)">
            <summary>
            Aligns a string given a total character width and alignment style. Fills in the extra space with the space character.
            </summary>
            <param name="value">The current string.</param>
            <param name="alignment">The horizontal alignment.</param>
            <param name="totalWidth">The total width of the new string.</param>
            <returns>A new string instance.</returns>
        </member>
        <member name="M:System.StringExtensions.Align(System.String,SadConsole.HorizontalAlignment,System.Int32,System.Char)">
            <summary>
            Aligns a string given a total character width and alignment style.
            </summary>
            <param name="value">The current string.</param>
            <param name="alignment">The horizontal alignment.</param>
            <param name="totalWidth">The total width of the new string.</param>
            <param name="fillCharacter">The character to use to fill in the extra spaces after alignment.</param>
            <returns>A new string instance.</returns>
        </member>
        <member name="M:System.StringExtensions.CreateColored(System.String,System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadRogue.Primitives.Color},System.Nullable{SadConsole.Mirror})">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground and background, setting the ignore properties if needed.
            </summary>
            <param name="value">The current string.</param>
            <param name="foreground">The foreground color. If null, <see cref="F:SadConsole.ColoredString.IgnoreForeground"/> will be set.</param>
            <param name="background">The background color. If null, <see cref="F:SadConsole.ColoredString.IgnoreBackground"/> will be set.</param>
            <param name="mirror">The mirror setting. If null, <see cref="F:SadConsole.ColoredString.IgnoreMirror"/> will be set.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:System.StringExtensions.CreateGradient(System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground gradient and cell effect. 
            </summary>
            <param name="value">The current string.</param>
            <param name="startingForeground">The starting foreground color to blend.</param>
            <param name="endingForeground">The ending foreground color to blend.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:System.StringExtensions.CreateGradient(System.String,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadRogue.Primitives.Color,SadRogue.Primitives.Color)">
            <summary>
            Creates a <see cref="T:SadConsole.ColoredString"/> object from an existing string with the specified foreground gradient, background gradient, and cell effect. 
            </summary>
            <param name="value">The current string.</param>
            <param name="startingForeground">The starting foreground color to blend.</param>
            <param name="endingForeground">The ending foreground color to blend.</param>
            <param name="startingBackground">The starting background color to blend.</param>
            <param name="endingBackground">The ending background color to blend.</param>
            <returns>A <see cref="T:SadConsole.ColoredString"/> object instace.</returns>
        </member>
        <member name="M:System.StringExtensions.ToBool(System.String)">
            <summary>
            Converts a string to a boolean when it is "0", "1", "true", or "false".
            </summary>
            <param name="item">The string to convert</param>
            <returns>The converted boolean value, otherwise false.</returns>
        </member>
        <member name="M:System.StringExtensions.Masked(System.String,System.String)">
            <summary>
            Returns a string of mask characters the same length as the input string.
            </summary>
            <param name="toMask">The string to mask.</param>
            <param name="mask">The mask to use.</param>
            <returns>A string of masks.</returns>
        </member>
    </members>
</doc>
