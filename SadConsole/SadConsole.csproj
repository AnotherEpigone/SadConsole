<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.1;netcoreapp3.1</TargetFrameworks>
    <AssemblyName>SadConsole</AssemblyName>
    <DocumentationFile>SadConsole.xml</DocumentationFile>
    <Version>9.0.0-alpha7</Version>
    <!--COMMENT OUT DURING BETA <Version Condition="'$(Configuration)'=='Debug'">$(Version)-debug</Version>-->
    <Authors>Thraka</Authors>
    <Company>SadLogic</Company>
    <NeutralLanguage>en-US</NeutralLanguage>
    <AssemblyTitle>SadConsole (.NET Standard)</AssemblyTitle>
    <Description>A library that emulates old-school console and command prompt style graphics. Targets .NET Standard 2.1.</Description>
    <Copyright>Copyright © 2020 Steve De George JR (Thraka)</Copyright>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <PackageId>SadConsole</PackageId>
    <PackageIcon>nugeticon.png</PackageIcon>
    <RepositoryUrl>https://github.com/SadConsole/SadConsole</RepositoryUrl>
    <RepositoryType>git</RepositoryType>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <PackageProjectUrl>http://sadconsole.com/</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <IncludeSymbols>true</IncludeSymbols>
    <IncludeSource>true</IncludeSource>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <EmbedAllSources>true</EmbedAllSources>
    <PackageTags>sfml;roguelike;cli;xna;game;development;console;ansi;ascii;textmode</PackageTags>
    <PackageReleaseNotes>
A lot of structual changes to split out rendering from SadConsole. You now need to add SadConsole.Host.MonoGame
or SadConsole.Host SFML to your project.

Major changes:

- Object model has changed a lot. Console types no longer inherit from CellSurface and are based on a few different base
classes and interfaces implemented through ScreenObject. Everything in SadConsole is now a ScreenObject.

- Console.Surface represents the cell surface of the console. Extension methods are provided so that you can use
Console.Print and related methods. If you coding inside a Console instance though, the extension methods only work if
you qualify the call with this.Print.

- Font/FontMaster are now merged into a single type: Font.

- Font sizes are always represented in an X,Y value now, and are seperate from the font itself. This means every
console has a Font and FontSize property now instead of a single Font property.

- All UI objects were moved into the SadConsole.UI namespace.

- The theme system was overhauled (and mostly backported to SadConsole v8).

- A lot of misc name changes, swapping out where it specified Console and substituting ScreenObject. For example,
SadConsole.Input.MouseConsoleState is now SadConsole.Input.MouseScreenObjectState

- SadConsole.Global had a lot of changes and not longer exists. Properties from Global are now available on SadConsole.GameHost.Instance.

- SadConsole.GameHost.Instance.Screen is the root console displayed on the screen to which all other objects are attached to. It is a console
and you cannot change this. It makes it simpler for new users. To disable it, disable the renderer: SadConsole.GameHost.Instance.Screen.Renderer = null.
Objects added to the Children collection will still work; SadConsole will not bother drawing the root console itself.

- ControlConsole no longer provides the logic for the GUI system. This was migrated to a new component: ControlHost. The host can be added to any console
you want to be able to display controls. The ControlsConsole type remains for ease of use. It now provides a ControlHostComponent property with direct
access to the component instance automatically added to the console.

- Entity is no longer a Console but a ScreenObject.

- App creation is slightly different with a few names migrated and events for draw/update callbacks

  SadConsole.Game.Create(80, 25);
  SadConsole.Game.Instance.OnStart = Init;
  SadConsole.Game.Instance.FrameUpdate += Instance_FrameUpdate;
  SadConsole.Game.Instance.Run();
  SadConsole.Game.Instance.Dispose();
    </PackageReleaseNotes>
  </PropertyGroup>

  <ItemGroup>
    <Compile Remove="Input\ConsoleViewInputHandler.cs" />
    <Compile Remove="Input\MouseEventArgs.cs" />
    <Compile Remove="SerializedTypes\AnimatedConsole.cs" />
    <Compile Remove="SerializedTypes\CellSurface.cs" />
    <Compile Remove="SerializedTypes\CellSurfaceLayer.cs" />
    <Compile Remove="SerializedTypes\Console.cs" />
    <Compile Remove="SerializedTypes\Entity.cs" />
    <Compile Remove="SerializedTypes\ScreenObject.cs" />
    <Compile Remove="SerializedTypes\ScrollingConsole.cs" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Newtonsoft.Json" Version="12.0.3" />
    <PackageReference Include="SharpFNT" Version="2.0.0" />
    <PackageReference Include="TheSadRogue.Primitives" Version="1.0.0-alpha4-debug" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0" PrivateAssets="All" />
  </ItemGroup>

  <ItemGroup>
    <EmbeddedResource Include="Resources\IBM8x16_NoPadding_extended.png" />
    <EmbeddedResource Include="Resources\IBM_ext.font" />
    <EmbeddedResource Include="Resources\IBM8x16.png" />
    <EmbeddedResource Include="Resources\IBM.font" />
    <None Include="Resources\readme.txt" pack="true" PackagePath="." />
    <None Include="Resources\nugeticon.png" pack="true" PackagePath="." />
    <None Remove="SadConsole.xml" />
  </ItemGroup>

  <Target Name="MyPostCompileTarget" AfterTargets="Build" Condition="'$(OS)' == 'Windows_NT'">
    <Exec Command="dotnet tool restore" />
    <Exec Command="dotnet inheritdoc -o -b $(OutDir)" />
  </Target>

  <Target Name="CopyPackage" AfterTargets="Pack">
    <Copy SourceFiles="$(OutputPath)\$(PackageId).$(PackageVersion).nupkg" DestinationFolder="$(OutputPath)..\..\..\nuget" />
    <Copy SourceFiles="$(OutputPath)\$(PackageId).$(PackageVersion).snupkg" DestinationFolder="$(OutputPath)..\..\..\nuget" />
  </Target>

</Project>
